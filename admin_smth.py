from aiogram import Router, types
from aiogram.utils.markdown import hlink, hcode
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.filters.command import Command, CommandObject

from filters.chat_type import ChatTypeFilter
from database import add_user, is_user_exists_chat_db, get_member_chat_info


router = Router()

# /reg
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('reg'))
async def reg_member(message: types.Message, command: CommandObject):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —á—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π\n
    –¢—Ä–µ–±—É–µ—Ç—Å—è 1+ —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏\n
    """

    admin_info = await get_member_chat_info(message.chat.id, message.from_user.id)
    if admin_info is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
    if admin_info[2] < 1: return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
    if message.reply_to_message is None and command.args is None: return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID!*', parse_mode='Markdown')
    
    if message.reply_to_message is not None: user = message.reply_to_message.from_user
    else:
        if command.args.isdecimal() == False: return await message.reply('‚ö†Ô∏è *–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –±—É–∫–≤—ã!*')
        user = await message.chat.get_member(int(command.args))
        user = user.user

    data = await is_user_exists_chat_db(message.chat.id, user.id)
    if not data:
        member_info = await add_user(message.chat.id, (user.id, user.username, 0, user.first_name, 0, 0, 0, 0, 20, 0))
        return await message.answer(f'üòá –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {hlink(admin_info[3], message.from_user.url)} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hlink(member_info[3], user.url)}', parse_mode='HTML')

    return await message.reply('‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*', parse_mode='Markdown')


# /clear
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('clear'))
async def clear_chat(message: types.Message, command: CommandObject):
    """
    –û—á–∏—Å—Ç–∫–∞ quantity —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ\n
    –¢—Ä–µ–±—É–µ—Ç—Å—è 2+ —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏\n
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :quantity - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    """

    admin_info = await get_member_chat_info(message.chat.id, message.from_user.id)
    if admin_info is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
    if admin_info[2] < 3: return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
    
    clear = command.args
    if clear is None or len(clear.strip()) <= 0 or not clear.isdecimal(): return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */clear <–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–æ–ª—å—à–µ 0)>*!', parse_mode='Markdown')
    
    message_id = message.message_id
    exceptions = 0
    i = 0
    while i < int(clear):
        try:
            message_id -= 1; i += 1
            await message.chat.delete_message(message_id)
        
        except TelegramForbiddenError: return await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {hlink(admin_info[3], message.from_user.url)} –æ—á–∏—Å—Ç–∏–ª —Ç–æ–ª—å–∫–æ {hcode(i)} –∏–∑ {hcode(clear)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑-–∑–∞ <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram</b>!', parse_mode= "HTML")
        except TelegramBadRequest:
            exceptions += 1
            if exceptions > 60: return await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {hlink(admin_info[3], message.from_user.url)} –æ—á–∏—Å—Ç–∏–ª —Ç–æ–ª—å–∫–æ {hcode(i)} –∏–∑ {hcode(clear)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑-–∑–∞ <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram</b>!', parse_mode= "HTML")
    
    else: 
        return await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {hlink(admin_info[3], message.from_user.url)} –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ {hcode(i)} –∏–∑ {hcode(clear)} —Å–æ–æ–±—â–µ–Ω–∏–π!', parse_mode= "HTML")
