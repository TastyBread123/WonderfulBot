from aiogram import Router, types, F

from filters.chat_type import ChatTypeFilter
from database import get_config_data, add_message_chat_user, add_user

router = Router()


@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), F.text == '–ü—Ä–∞–≤–∏–ª–∞')
async def rules_message_handler(message: types.Message):
    rules = await get_config_data(message.chat.id)
    if rules is None: return await message.reply('üëã –°–æ–∑–¥–∞—Ç–µ–ª—å –±–µ—Å–µ–¥—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –Ω–µ –¥–æ–±–∞–≤–∏–ª –ø—Ä–∞–≤–∏–ª–∞')

    return await message.answer(f'üëã –ü—Ä–∞–≤–∏–ª–∞ –±–µ—Å–µ–¥—ã:\n\n<b>{rules[0]}</b>', parse_mode= "HTML")


@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), F.text)
async def every_message(message: types.Message):
    level = await add_message_chat_user(message.chat.id, message.from_user.id)
    if level == 'UserError':
        return await add_user(message.chat.id, (message.from_user.id, message.from_user.username, 0, message.from_user.first_name, 0, 0, 0, 0, 20, 0))
    
    if type(level) is int: 
        return await message.answer(f'@{message.from_user.username}\n<b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å!\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å - {level}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üíñ</b>', parse_mode= "HTML") 
