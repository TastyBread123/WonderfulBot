import random
import time
import sqlite3
import datetime
import logging
import os
import asyncio
import aiogram
import magic_filter


from aiogram import Dispatcher, executor
from aiogram.dispatcher.filters import BoundFilter
from PIL import Image
from gtts import gTTS

from config import token, dir, version

#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –±–æ—Ç—É
db = sqlite3.connect('C:\\!python\\–ø—Ä–æ–µ–∫—Ç—ã\\bot_chat\\Bot System\\bot.db', check_same_thread=False)
c = db.cursor()
bot = aiogram.Bot(token, parse_mode=None)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


#–í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
date = datetime.datetime.now()
print(f"{date} | –ë–æ—Ç v. {version} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

@dp.message_handler(commands=['start'])
async def start(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]
        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            data = c.fetchone()

            if data is None:
                adminn = 0
                nickn = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                warnss = 0
                vipp = 0
                user_name = message.from_user.username
                total_exp = 0
                tolvl_exp = 0
                need_exp = 20
                level = 0

                user_info = (int(user_id), str(user_name), int(adminn), str(nickn), int(warnss), int(vipp), int(total_exp), int(tolvl_exp), int(need_exp), int(level))
                c.execute(f"INSERT INTO chat_{chat_id}(id, login, admin, nick, warns, vip, total_exp, tolvl_exp, need_exp, level) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",(user_info))
                db.commit()
                await message.reply("‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!*", parse_mode='Markdown')

            else:
                await message.reply("‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å*!", parse_mode='Markdown')

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


class check_admin(BoundFilter):
    key = 'is_admin'

    def __init__(self, is_admin):
        self.is_admin = is_admin

    async def check(self, message):
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.is_chat_admin()

dp.filters_factory.bind(check_admin)
@dp.message_handler(commands=["startbot"], is_admin=True)
async def botstart(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            res_chat_id = ""
            chat_id = message.chat.id
            chat_id=str(chat_id)

            for i in range(0, len(chat_id)): 
                if i != 0: 
                    res_chat_id = res_chat_id + chat_id[i]

            c.execute(f"SELECT id FROM config WHERE id = {res_chat_id}")
            data = c.fetchone()
            
            if data is None and (message.chat.type == "group" or "supergroup"):
                starter_id = message.from_user.id
                standart_welcome = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –±–µ—Å–µ–¥–µ!"
                user_name = message.from_user.username

                start_info = (starter_id, str(user_name), 6, '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 0, 1, 0, 0, 20, 0)
                config_info = (res_chat_id, standart_welcome, "–ü—Ä–∞–≤–∏–ª–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
                
                c.execute(f"""CREATE TABLE IF NOT EXISTS chat_{res_chat_id}(
                id INT,
                login TEXT,
                admin INT,
                nick TEXT,
                warns INT,
                vip INT,
                total_exp INT,
                tolvl_exp INT,
                need_exp INT,
                level INT)
                """)
                db.commit()
                

                c.execute(f"INSERT INTO chat_{res_chat_id} (id, login, admin, nick, warns, vip, total_exp, tolvl_exp, need_exp, level) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (start_info))
                db.commit()
                c.execute("INSERT INTO config (id, welcome, rules) VALUES (?, ?, ?)", (config_info))
                db.commit()

                await message.reply("‚úÖ *–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –±–µ—Å–µ–¥–µ! –í–∞–º –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 6 —É—Ä–æ–≤–Ω—è –∏ VIP —Å—Ç–∞—Ç—É—Å*\n\n*‚ùóÔ∏è –ù–∞–ø—É—Ç—Å—Ç–≤–∏–µ:\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–∞–≤–∏–ª–∞*!", parse_mode='Markdown')
            
            else:
                await message.reply('‚ùå –ë–æ—Ç *—É–∂–µ* –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ!', parse_mode='Markdown')
        
        except:
            await message.answer(f'üìÑ *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', parse_mode='Markdown')



@dp.message_handler(commands=["help"])
async def help(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        return await message.reply('*–ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*:\n*–û—Å–Ω–æ–≤–Ω–æ–µ*:\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/start - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ\n/profile(/user) - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)\n/rank - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EXP(–ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ EXP –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)\n/botinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/rankinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —É—Ä–æ–≤–Ω–µ–π –∏ EXP\n–ü—Ä–∞–≤–∏–ª–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n\n*–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è*:\n/mynick *<–Ω–æ–≤—ã–π –Ω–∏–∫>* - –∏–∑–º–µ–Ω–∏—Ç—å —Å–µ–±–µ –Ω–∏–∫\n/random(/rand) *<–æ—Ç> <–¥–æ>* - —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ\n/chance *<text>* - —É–∑–Ω–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ text\n/binar *<–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (–ø—Ä–µ—Ñ–∏–∫—Å 0b)>* - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω–æ–µ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç\n/say *<—Ç–µ–∫—Å—Ç>* - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞\n/write *<—Ç–µ–∫—Å—Ç>* - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞\n\n*–†–ü –∫–æ–º–∞–Ω–¥—ã*:\n/ebaca(/sex) - —Ç—Ä–∞—Ö–Ω—É—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n/kiss - –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n/slap - –¥–∞—Ç—å –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é\n/kill - —É–±–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', parse_mode= "Markdown")


@dp.message_handler(commands=["botinfo"])
async def botinfo(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        return await message.reply(f'üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ *WonderfulBot*:\n\nüíø *–í–µ—Ä—Å–∏—è: {version}*\nü§ì *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º* - /help\nüñ• *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞* - [—Ç—ã–∫](https://stats.uptimerobot.com/4PGZDSzK4B/792996254)\n\n‚òïÔ∏è *–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞* - [—Ç—ã–∫](https://t.me/wonderful_bot_channel)', parse_mode='Markdown')


@dp.message_handler(content_types=['new_chat_members'])
async def welcome(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        user_name = message.new_chat_members[0].username

        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            data = c.fetchone()

            chat_id = message.chat.id
            chat_id=str(chat_id)

            res_chat_id = ''
            for i in range(0, len(chat_id)): 
                if i != 0: 
                    res_chat_id = res_chat_id + chat_id[i]

            c.execute(f"SELECT welcome FROM config WHERE id = {res_chat_id}")
            welcome = c.fetchone()[0]
        
        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
        
        if data is None:
            try:
                adminn = 0
                nickn = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                warnss = 0
                vipp = 0
                level = 0
                user_name = message.from_user.username
                total_exp = 0
                tolvl_exp = 0
                need_exp = 50

                user_info = (int(user_id), str(user_name), int(adminn), str(nickn), int(warnss), int(vipp), int(total_exp), int(tolvl_exp), int(need_exp), int(level))
                c.execute(f"INSERT INTO chat_{chat_id}(id, login, admin, nick, warns, vip, total_exp, tolvl_exp, need_exp, level) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",(user_info))
                db.commit()

                await message.answer(f'@{user_name}\n{welcome}')

            except:
                try:
                    await message.answer(f'@{user_name}\n{welcome}')

                except sqlite3.OperationalError:
                    return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
            
        else:
            try:
                admin = 0
                c.execute("UPDATE users SET admin = ? WHERE id = ?", (admin, int(user_id)))
                db.commit()

                await message.answer(f'@{user_name}\n{welcome}')
            
            except:
                try:
                    await message.answer(f'@{user_name}\n{welcome}')

                except sqlite3.OperationalError:
                    return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


@dp.message_handler(commands=["reg"])
async def reg_mem(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 1:
            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
            
            else:
                try:
                    warnmem_id = message.reply_to_message.from_user.id
                    warnmember_name = message.reply_to_message.from_user.username
                    user_name = message.from_user.username

                    c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {warnmem_id}")
                    data = c.fetchone()

                    if data == None:
                        adminn = 0
                        nickn = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                        warnss = 1
                        vipp = 0
                        level = 0
                        total_exp = 0
                        tolvl_exp = 0
                        need_exp = 20

                        user_info = (int(warnmem_id), str(warnmember_name), int(adminn), str(nickn), int(warnss), int(vipp), int(total_exp), int(tolvl_exp), int(need_exp), int(level))
                        c.execute(f"INSERT INTO chat_{chat_id} (id, login, admin, nick, warns, vip, total_exp, tolvl_exp, need_exp, level) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (user_info))
                        db.commit()

                        await message.answer(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>@{user_name}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{warnmember_name}<*b>', parse_mode='HTML')
                        await message.delete()

                    else:
                        await message.reply('‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*', parse_mode='Markdown')

                except sqlite3.OperationalError:
                    return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=['kick'])
async def kick_member(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 1:
            try:
                if message.reply_to_message is None:
                    try:
                        kickmem_name = message.text.split('@', maxsplit=1)[1]

                        c.execute(f"SELECT id FROM chat_{chat_id} WHERE login = {kickmem_name}")
                        kickmem_id = c.fetchone()[0]
                        
                        await bot.kick_chat_member(chat_id, kickmem_id, 30)
                        await message.answer(f'üò± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{adminmem} –∫–∏–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{kickmem_name}', parse_mode= "HTML")
                        await message.delete()

                        date = datetime.datetime.now()
                        print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {adminmem} –∫–∏–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {kickmem_name}')

                    except:
                        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                
                else:
                    chat_id = message.chat.id
                    adminmem = message.from_user.username
                    kickmem_id = message.reply_to_message.from_user.id
                    kickmem_name = message.reply_to_message.from_user.username

                    await bot.kick_chat_member(chat_id, kickmem_id, 30)
                    await message.answer(f'üò± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{adminmem} –∫–∏–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{kickmem_name}', parse_mode= "HTML")
                    await message.delete()

                    date = datetime.datetime.now()
                    print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {adminmem} –∫–∏–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {kickmem_name}')

            except aiogram.utils.exceptions.CantRestrictSelf:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –º–µ–Ω—è!*", parse_mode='Markdown')

            except aiogram.utils.exceptions.UserIsAnAdministratorOfTheChat:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')

            except aiogram.utils.exceptions.CantRestrictChatOwner:
                await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')



@dp.message_handler(commands=['getid', 'gid'])
async def get_id(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 1:
            if message.reply_to_message is None:
                await message.answer('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ ID!*', parse_mode='Markdown')
        
            else:
                getkmem_id = message.reply_to_message.from_user.id
                getmem_name = message.reply_to_message.from_user.username
                await message.answer(f'üîç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{getmem_name} - <b>{getkmem_id}</b>', parse_mode= "HTML")
                await message.delete()

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=['makeadmin'])
async def set_admin(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        whoisset = message.from_user.id

        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {whoisset}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 5:
            whoisset_name = message.from_user.username

            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –Ω–∞ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!*', parse_mode='Markdown')
            
            else:
                try:
                    setadmin_id = message.reply_to_message.from_user.id
                    setadmin_name = message.reply_to_message.from_user.username

                    makeadmin_lvl = message.text.split(maxsplit=1)[1]
                    makeadmin_info = (makeadmin_lvl)

                    if int(makeadmin_lvl) <= -1:
                        await message.reply("*–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å -1 –∏ –º–µ–Ω—å—à–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')

                    elif int(makeadmin_lvl) >= 6:
                        await message.reply("*–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 6 –∏ –±–æ–ª—å—à–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')

                    else:
                        c.execute(f"SELECT admin FROM chat_{chat_id} WHERE id = {setadmin_id}")
                        checkadmin = c.fetchone()[0]

                        if int(checkadmin) >= 6:
                            await message.reply("‚ö†Ô∏è *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å/—Å–Ω—è—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')
                            
                        else:
                            c.execute(f"UPDATE chat_{chat_id} SET admin=? WHERE id={setadmin_id}", (makeadmin_info))
                            db.commit()

                            await message.answer(f'üëÆ –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{whoisset_name} –Ω–∞–∑–Ω–∞—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{setadmin_name} <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {makeadmin_lvl} —É—Ä–æ–≤–Ω—è</b>', parse_mode= "HTML")
                            await message.delete()

                            date = datetime.datetime.now()
                            print(f'{date} | –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {whoisset_name} –Ω–∞–∑–Ω–∞—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {setadmin_name} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {makeadmin_lvl} —É—Ä–æ–≤–Ω—è')

                except IndexError:
                    await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */makeadmin <level>*!", parse_mode='Markdown')

                except ValueError:
                    await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */makeadmin <level>! –ê—Ä–≥—É–º–µ–Ω—Ç <level> - —á–∏—Å–ª–æ*!", parse_mode='Markdown')

        else:
            await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç 5-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!", parse_mode='Markdown')


@dp.message_handler(commands=["mute"])
async def mute(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        whoismute = message.from_user.id

        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {whoismute}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 1:
            whoismute_name = message.from_user.username

            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–º—É—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
            
            else:
                try:
                    mute_time = message.text.split(maxsplit=1)[1]

                    new = {'can_send_messages': False, 'can_send_media_messages': False,'can_send_polls': False,'can_send_other_messages': False, 'can_add_web_page_previews': False,}

                    await bot.restrict_chat_member(chat_id = message.chat.id, user_id = message.reply_to_message.from_user.id,  permissions= new, until_date=time.time() + int(mute_time)*60)

                    if int(mute_time) >= 1:
                        punishman_name = message.reply_to_message.from_user.username
                        
                        date = datetime.datetime.now()
                        print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {whoismute_name} –∑–∞–º—É—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {punishman_name} –Ω–∞ {mute_time} –º–∏–Ω—É—Ç')
                        
                        await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{whoismute_name} –∑–∞–º—É—Ç–∏–ª @{punishman_name} –Ω–∞ <b>{mute_time} –º–∏–Ω—É—Ç</b>', parse_mode= "HTML")
                        await message.delete()

                    else:
                        punishman_name = message.reply_to_message.from_user.username
                        
                        date = datetime.datetime.now()
                        print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {whoismute_name} –∑–∞–º—É—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {punishman_name} –Ω–∞–≤—Å–µ–≥–¥–∞')
                        
                        await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{whoismute_name} –∑–∞–º—É—Ç–∏–ª @{punishman_name} <b>–Ω–∞–≤—Å–µ–≥–¥–∞</b>', parse_mode= "HTML")
                
                except IndexError:
                    await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mute <–≤—Ä–µ–º—è(–≤ –º–∏–Ω—É—Ç–∞—Ö)>!", parse_mode='Markdown')

                except aiogram.utils.exceptions.CantRestrictSelf:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –º–µ–Ω—è!*", parse_mode='Markdown')

                except aiogram.utils.exceptions.UserIsAnAdministratorOfTheChat:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')

                except aiogram.utils.exceptions.CantRestrictChatOwner:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["unmute"])
async def unmute(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        whoismute = message.from_user.id

        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {whoismute}")
            isadmin = c.fetchone()

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin[0] >= 1:
            whoismute_name = message.from_user.username

            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º—É—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
            
            else:
                try:
                    punishman_name = message.reply_to_message.from_user.username
                    new = {'can_send_messages': True, 'can_send_media_messages': True,'can_send_polls': True,'can_send_other_messages': True, 'can_add_web_page_previews': True,}

                    await bot.restrict_chat_member(chat_id = message.chat.id, user_id = message.reply_to_message.from_user.id, permissions=new)

                except aiogram.utils.exceptions.CantRestrictSelf:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å –º–µ–Ω—è!*", parse_mode='Markdown')

                except aiogram.utils.exceptions.UserIsAnAdministratorOfTheChat:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')

                except aiogram.utils.exceptions.CantRestrictChatOwner:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')

                
                date = datetime.datetime.now()
                print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {whoismute_name} —Ä–∞–∑–º—É—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {punishman_name}')

                await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{whoismute_name} —Ä–∞–∑–º—É—Ç–∏–ª @{punishman_name}', parse_mode= "HTML")
                await message.delete()
        
        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["ahelp"])
async def ahelp(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode='Markdown')

        if isadmin == 1:
            await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:' + '\n\n*1-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/ahelp - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/kick - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/mute <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö> - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unmute - —Å–Ω—è—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/getid(/gid) - —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/getnick(/gnick) - —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/checkvip - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞\n/reg - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', parse_mode= "Markdown")
        
        elif isadmin == 2:
            await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:' + '\n\n*1-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/ahelp - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/kick - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/mute *<–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>* - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unmute - —Å–Ω—è—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/getid(/gid) - —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/getnick(/gnick) - —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/checkvip - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞\n/reg - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n*2-–æ–π —É—Ä–æ–≤–µ–Ω—å*:\n/pin - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpin - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpinall - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n/welcome - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', parse_mode= "Markdown")
        
        elif isadmin == 3:
            await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:', parse_mode= "Markdown")
        
        elif isadmin == 4:
            await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:', parse_mode= "Markdown")

        elif isadmin >= 5:
            await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:' + '\n\n*1-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/ahelp - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/kick - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/mute *<–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>* - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unmute - —Å–Ω—è—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/getid(/gid) - —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/getnick(/gnick) - —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/checkvip - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞\n/reg - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n*2-–æ–π —É—Ä–æ–≤–µ–Ω—å*:\n/pin - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpin - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpinall - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n/welcome - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n\n*3-–∏–π —É—Ä–æ–≤–µ–Ω—å*:\n/ban *<–≤—Ä–µ–º—è –≤ –¥–Ω—è—Ö>* - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unban *<id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å>* - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/warn - –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/unwarn - —Å–Ω—è—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/setnick *<–Ω–æ–≤—ã–π –Ω–∏–∫>* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n*4-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/title *<–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n/description(/desc) *<–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>* - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n/setwelcome *<–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ> - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ*\n\n*–í–ª–∞–¥–µ–ª–µ—Ü –±–µ—Å–µ–¥—ã*:\n/makeadmin *<—É—Ä–æ–≤–µ–Ω—å>* - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–¥–º–∏–Ω–∫—É\n/setvip *<1 - –≤—ã–¥–∞—Ç—å/2 - –∑–∞–±—Ä–∞—Ç—å>* - –≤—ã–¥–∞—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å VIP —Å—Ç–∞—Ç—É—Å\n/setrules *<–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞>* - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞', parse_mode= "Markdown")

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["pin"])
async def pin_mes(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 2:
            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –µ–≥–æ!')
            
            else:
                user_name = message.from_user.username
                pin_name = message.reply_to_message.message_id
                chat_id = message.chat.id

                await bot.pin_chat_message(chat_id, pin_name)

                date = datetime.datetime.now()
                print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_name} –∑–∞–∫—Ä–µ–ø–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {pin_name}')
                
                await message.answer(f'üìå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} <b>–∑–∞–∫—Ä–µ–ø–∏–ª</b> —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID <b>{pin_name}</b>', parse_mode= "HTML")
                await message.delete()
        
        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["unpin"])
async def unpin_mes(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 2:
            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –µ–≥–æ!')
            
            else:
                user_name = message.from_user.username
                unpin_name = message.reply_to_message.message_id
                chat_id = message.chat.id

                await bot.unpin_chat_message(chat_id, unpin_name)

                date = datetime.datetime.now()
                print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_name} –æ—Ç–∫—Ä–µ–ø–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {unpin_name}')

                await message.answer(f'üìå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} <b>–æ—Ç–∫—Ä–µ–ø–∏–ª</b> —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID <b>{unpin_name}</b>', parse_mode= "HTML")
                await message.delete()
        
        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["unpinall"])
async def unpin_all(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 2:
            user_name = message.from_user.username
            chat_id = message.chat.id

            await bot.unpin_all_chat_messages(chat_id)

            date = datetime.datetime.now()
            print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_name} –æ—Ç–∫—Ä–µ–ø–∏–ª –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ—Å–µ–¥—ã')

            await message.answer(f'üìå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} <b>–æ—Ç–∫—Ä–µ–ø–∏–ª –≤—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>', parse_mode= "HTML")
            await message.delete()
        
        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["title"])
async def set_title(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 4:
            try:
                chat_id = message.chat.id
                user_name = message.from_user.username
                new_title = message.text.split(maxsplit=1)[1]
                
                await bot.set_chat_title(chat_id, new_title)
                await message.answer(f'üç© –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã –Ω–∞ <b>{new_title}</b>', parse_mode= "HTML")
                await message.delete()

                date = datetime.datetime.now()
                print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_name} –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã –Ω–∞ {new_title}')

            except IndexError:
                await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */title <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>*!", parse_mode= "Markdown")

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 4-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode= "Markdown")


@dp.message_handler(commands=["ban"])
async def ban_mem(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 3:

            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode= "Markdown")
            
            else:
                try:
                    banmember_id = message.reply_to_message.from_user.id
                    banmember_name = message.reply_to_message.from_user.username
                    user_name = message.from_user.username
                    until_date = message.text.split(maxsplit=1)[1]
                    
                    c.execute(f"SELECT vip FROM chat_{chat_id} WHERE id = {banmember_id}")
                    isvip = c.fetchone()[0]
                    
                    if int(isvip) == 1:
                        if int(until_date) > 10:
                            await message.reply('‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 10 –¥–Ω–µ–π!')
                        
                        else:
                            await bot.ban_chat_member(chat_id, banmember_id, until_date=time.time() + int(until_date)*86400)
                        
                            if int(until_date) >= 1:
                                await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{banmember_name} –Ω–∞ <b>{until_date} –¥–Ω–µ–π</b>', parse_mode= "HTML")
                                await message.delete()

                            else:
                                await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{banmember_name} <b>–Ω–∞–≤—Å–µ–≥–¥–∞</b>', parse_mode= "HTML")
                                await message.delete()
                    
                    else:
                        bot.ban_chat_member(chat_id, banmember_id, until_date=time.time() + int(until_date)*86400)
                        
                        if int(until_date) >= 1:
                            await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{banmember_name} –Ω–∞ <b>{until_date} –¥–Ω–µ–π</b>', parse_mode= "HTML")                
                            await message.delete()

                        else:
                            await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{banmember_name} <b>–Ω–∞–≤—Å–µ–≥–¥–∞</b>', parse_mode= "HTML")
                            await message.delete()

                except IndexError:
                    await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */ban <—Å—Ä–æ–∫ (–≤ –¥–Ω—è—Ö)>*!", parse_mode= "Markdown")

                except aiogram.utils.exceptions.CantRestrictSelf:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –º–µ–Ω—è!*", parse_mode= "Markdown")
                
                except aiogram.utils.exceptions.UserIsAnAdministratorOfTheChat:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode= "Markdown")

                except aiogram.utils.exceptions.CantRestrictChatOwner:
                    await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode= "Markdown")
        
        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["warn"])
async def warn_mem(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 3:
            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–≤–∞—Ä–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode= "Markdown")
            
            else:
                warnmem_id = message.reply_to_message.from_user.id
                warnmember_name = message.reply_to_message.from_user.username
                user_name = message.from_user.username

                c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {warnmem_id}")
                data = c.fetchone()

                if data == None:
                    await message.reply('‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /reg*', parse_mode= "Markdown")

                else:
                    plus = 1
                    c.execute(f"UPDATE chat_{chat_id} SET warns = warns + ? WHERE id= ?", (plus, warnmem_id))
                    db.commit()

                    c.execute(f"SELECT warns FROM chat_{chat_id} WHERE id = {warnmem_id}")
                    skolko = c.fetchone()[0]
                    
                    await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} <b>–≤—ã–¥–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{warnmember_name}\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {skolko}', parse_mode= "HTML")
                    await message.delete()

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["unwarn"])
async def unwarn_mem(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0:
                chat_id = chat_id + izn_chat_id[i]
        
        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 3:
            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–Ω—è—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é!*', parse_mode='Markdown')
            
            else:
                warnmem_id = message.reply_to_message.from_user.id
                warnmember_name = message.reply_to_message.from_user.username
                user_name = message.from_user.username

                c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {warnmem_id}")
                data = c.fetchone()

                if data == None:
                    await message.reply('‚õîÔ∏è *–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!*', parse_mode='Markdown')

                else:
                    c.execute(f"SELECT warns FROM chat_{chat_id} WHERE id = {warnmem_id}")
                    skolko = c.fetchone()[0]
                
                    if skolko <= 0:
                        await message.reply('‚õîÔ∏è *–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!*', parse_mode='Markdown')
                
                    else:
                        minus = 1
                        c.execute(f"UPDATE chat_{chat_id} SET warns = warns - ? WHERE id = ?", (minus, warnmem_id))
                        db.commit()

                        c.execute(f"SELECT warns FROM chat_{chat_id} WHERE id = {warnmem_id}")
                        skolko = c.fetchone()[0]

                        await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} —Å–Ω—è–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{warnmember_name}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å <b>{skolko} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</b>', parse_mode= "HTML")
                        await message.delete()

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["user", "profile"])
async def check_stat(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        user_id = message.from_user.id
        user_name = message.from_user.username

        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        if message.reply_to_message is None:
            try:
                c.execute(f"SELECT warns FROM chat_{chat_id} WHERE id = {user_id}")
                check_warns = c.fetchone()[0]
                c.execute(f"SELECT nick FROM chat_{chat_id} WHERE id = {user_id}")
                check_nick = c.fetchone()[0]
                c.execute(f"SELECT level FROM chat_{chat_id} WHERE id = {user_id}")
                check_level = c.fetchone()[0]
                c.execute(f"SELECT total_exp FROM chat_{chat_id} WHERE id = {user_id}")
                check_totalexp = c.fetchone()[0]
                c.execute(f"SELECT tolvl_exp FROM chat_{chat_id} WHERE id = {user_id}")
                check_tolvlexp = c.fetchone()[0]
                c.execute(f"SELECT need_exp FROM chat_{chat_id} WHERE id = {user_id}")
                check_needexp = c.fetchone()[0]

                await message.reply(f'<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name}</b>\n\nüí¶ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <b>{check_nick}</b>\nüéì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ - <b>{check_warns}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_level}</b>. –í—Å–µ–≥–æ - <b>{check_totalexp} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_tolvlexp} EXP –∏–∑ {check_needexp} EXP</b>', parse_mode= "HTML")

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

            
        
        else:
            checkmem_id = message.reply_to_message.from_user.id
            checkmember_name = message.reply_to_message.from_user.username
            try:
                c.execute(f"SELECT warns FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_warns = c.fetchone()[0]
                c.execute(f"SELECT nick FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_nick = c.fetchone()[0]
                c.execute(f"SELECT level FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_level = c.fetchone()[0]
                c.execute(f"SELECT total_exp FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_totalexp = c.fetchone()[0]
                c.execute(f"SELECT tolvl_exp FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_tolvlexp = c.fetchone()[0]
                c.execute(f"SELECT need_exp FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_needexp = c.fetchone()[0]

                await message.reply(f'<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{checkmember_name}</b>\n\nüí¶ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <b>{check_nick}</b>\nüéì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ - <b>{check_warns}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_level}</b>. –í—Å–µ–≥–æ - <b>{check_totalexp} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_tolvlexp} EXP –∏–∑ {check_needexp} EXP</b>', parse_mode= "HTML")

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")



@dp.message_handler(commands=["rank"])
async def set_nick(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0: 
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            user_name = message.from_user.username

            try:
                c.execute(f"SELECT level FROM chat_{chat_id} WHERE id = {user_id}")
                check_level = c.fetchone()[0]
                c.execute(f"SELECT total_exp FROM chat_{chat_id} WHERE id = {user_id}")
                check_totalexp = c.fetchone()[0]
                c.execute(f"SELECT tolvl_exp FROM chat_{chat_id} WHERE id = {user_id}")
                check_tolvlexp = c.fetchone()[0]
                c.execute(f"SELECT need_exp FROM chat_{chat_id} WHERE id = {user_id}")
                check_needexp = c.fetchone()[0]

                await message.reply(f'<b>–ö–∞—Ä—Ç–æ—á–∫–∞ @{user_name}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_level}</b>. –í—Å–µ–≥–æ - <b>{check_totalexp} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_tolvlexp} EXP –∏–∑ {check_needexp} EXP</b>', parse_mode= "HTML")

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        else:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0: 
                    chat_id = chat_id + izn_chat_id[i]

            checkmem_id = message.reply_to_message.from_user.id
            checkmember_name = message.reply_to_message.from_user.username

            try:
                c.execute(f"SELECT level FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_level = c.fetchone()[0]
                c.execute(f"SELECT total_exp FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_totalexp = c.fetchone()[0]
                c.execute(f"SELECT tolvl_exp FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_tolvlexp = c.fetchone()[0]
                c.execute(f"SELECT need_exp FROM chat_{chat_id} WHERE id = {checkmem_id}")
                check_needexp = c.fetchone()[0]

                await message.reply(f'<b>–ö–∞—Ä—Ç–æ—á–∫–∞ @{checkmember_name}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_level}</b>. –í—Å–µ–≥–æ - <b>{check_totalexp} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_tolvlexp} EXP –∏–∑ {check_needexp} EXP</b>', parse_mode= "HTML")

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


@dp.message_handler(commands=["mynick"])
async def mynick(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0: 
                    chat_id = chat_id + izn_chat_id[i]
            
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            user_name = message.from_user.username
            new_nick = message.text.split(maxsplit=1)[1]

            

            c.execute(f"UPDATE chat_{user_id} SET nick = ? WHERE id= ?", (new_nick, user_id))
            db.commit()
            
            await message.answer(f'üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –Ω–∏–∫ –Ω–∞ <b>{new_nick}</b>', parse_mode= "HTML")
            await message.delete()

        except IndexError:
            await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */mynick <–Ω–æ–≤—ã–π –Ω–∏–∫>*!', parse_mode='Markdown')

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


@dp.message_handler(commands=["setnick", "snick"])
async def set_another_nick(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        user_id = message.from_user.id
        user_name = message.from_user.username
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 3:
            try:
                if message.reply_to_message is None:
                    await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
                
                else:
                    new_nick = message.text.split(maxsplit=1)[1]
                    change_id = message.reply_to_message.from_user.id
                    change_name = message.reply_to_message.from_user.username

                    c.execute(f"UPDATE chat_{chat_id} SET nick = ? WHERE id= ?", (new_nick, change_id))
                    db.commit()

                    await message.answer(f'üí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>@{user_name}</b> –∏–∑–º–µ–Ω–∏–ª –Ω–∏–∫ <b>@{change_name}</b> –Ω–∞ <b>{new_nick}</b>', parse_mode= "HTML")
                    await message.delete()

            except IndexError:
                await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */setnick <–Ω–æ–≤—ã–π –Ω–∏–∫>*!", parse_mode='Markdown')

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["gnick", "getnick"])
async def get_another_nick(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]
        
        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 1:
            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
            
            else:
                change_id = message.reply_to_message.from_user.id
                change_name = message.reply_to_message.from_user.username

                try:
                    c.execute(f"SELECT nick FROM chat_{chat_id} WHERE id = {change_id}")
                    check_nick = c.fetchone()[0]

                except TypeError:
                    await message.answer(f'üòê –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{change_name} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>!', parse_mode= "HTML")
                    return await message.delete()

                await message.answer(f'üíæ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{change_name}</b> ‚Äî <b>{check_nick}</b>', parse_mode= "HTML")
                return await message.delete()
                    
                    
        else:
            return message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")


@dp.message_handler(commands=["clear"])
async def clear_chat(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0:
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 2:
            try:
                clear = message.text.split(maxsplit=1)[1]
            except IndexError:
                clear = 10

            message_id = message.message_id
            i = 0
            exceptions = 0
        
            while i < int(clear):
                if exceptions >= 50:
                    await message.answer(f'üò¢ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ!\n–ë—ã–ª–æ –æ—á–∏—â–µ–Ω–æ —Ç–æ–ª—å–∫–æ <b>{i}</b> –∏–∑ <b>{clear}</b> —Å–æ–æ–±—â–µ–Ω–∏–π', parse_mode= "HTML")
                    break

                message_id -= 1
                i += 1

                try:
                    await bot.delete_message(message.chat.id, message_id)

                except aiogram.utils.exceptions.MessageCantBeDeleted:
                    await message.answer(f'‚úÖ –ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ <b>{i}</b> –∏–∑ <b>{clear}</b> —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑-–∑–∞ <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram</b>!', parse_mode= "HTML")
                    break

                except aiogram.utils.exceptions.MessageToDeleteNotFound:
                    i -= 1
                    exceptions += 1 
            else:
                await message.answer(f'‚úÖ –ë—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã –≤—Å–µ <b>{i}</b> –∏–∑ <b>{clear}</b> —Å–æ–æ–±—â–µ–Ω–∏–π!', parse_mode= "HTML")

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["rand", "random"])
async def random_chisl(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            user_name = message.from_user.username

            ot = message.text.split(maxsplit=2)[1]
            do = message.text.split(maxsplit=2)[2]

            resul_rand = random.randint(int(ot), int(do))

            await message.answer(f'üé≤ @{user_name}, –≤–∞—à–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç <b>{ot}</b> –¥–æ <b>{do}</b> ‚Äî <b>{resul_rand}</b>', parse_mode= "HTML")
            return await message.delete()

        except IndexError:
            return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */rand <–æ—Ç> <–¥–æ>**", parse_mode='Markdown')

        except ValueError:
            return await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –∏–ª–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */rand <–û–¢> <–î–û>*", parse_mode='Markdown')



@dp.message_handler(commands=["desc", "description"])
async def set_desc(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg*', parse_mode='Markdown')

        if isadmin >= 4:
            try:
                chat_id = message.chat.id
                user_name = message.from_user.username
                new_title = message.text.split(maxsplit=1)[1]

                await bot.set_chat_description(chat_id, new_title)
                
                await message.answer(f'üò± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>@{user_name}</b> –∏–∑–º–µ–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã –Ω–∞ <b>{new_title}</b>', parse_mode= "HTML")
                await message.delete()

                date = datetime.datetime.now()
                print(f'{date} | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_name} –∏–∑–º–µ–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã –Ω–∞ {new_title}')

            except IndexError:
                await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */description <new description>*!", parse_mode='Markdown')

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 4-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=["sex", "ebaca"])
async def sex_ebaca(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            try:
                user_name = message.from_user.username
                who = message.text.split('@', maxsplit=1)[1]

                await asyncio.sleep(2)
                photo = open(f'{dir}imgs/ebat.jpg', 'rb')
                await message.answer_photo(photo, f'üëâüëà –ü—É–ø—Å–∏–∫ @{user_name} —Ç—Ä–∞—Ö–Ω—É–ª —Å–µ–∫—Å-–º–∞—à–∏–Ω—É @{who}')
                await message.delete()

            except IndexError:
                await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */sex @username*', parse_mode='Markdown')

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg*', parse_mode='Markdown')

            
        else:
            try:
                user_name = message.from_user.username
                change_name = message.reply_to_message.from_user.username

                await asyncio.sleep(2)
                photo = open(f'{dir}imgs/ebat.jpg', 'rb')
                await message.answer_photo(photo, f'üëâüëà –ü—É–ø—Å–∏–∫ @{user_name} —Ç—Ä–∞—Ö–Ω—É–ª —Å–µ–∫—Å-–º–∞—à–∏–Ω—É @{change_name}')
                await message.delete()

            except:
                await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')


@dp.message_handler(commands=["kiss"])
async def kiss(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            try:
                user_name = message.from_user.username
                who = message.text.split('@', maxsplit=1)[1]
                
                await asyncio.sleep(2)
                photo = open(f'{dir}imgs/kiss.png', 'rb')
                await message.answer_photo(photo, f'üòç –ú–∞–ª—ã—à @{user_name} –ø–æ—Ü–µ–ª–æ–≤–∞–ª –∑–∞–π—á–∏–∫–∞ @{who}')
                await message.delete()

            except IndexError:
                await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */kiss @username*', parse_mode='Markdown')

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg*', parse_mode='Markdown')
            
        else:
            try:
                user_name = message.from_user.username
                change_name = message.reply_to_message.from_user.username

                await asyncio.sleep(2)
                photo = open(f'{dir}imgs/kiss.png', 'rb')
                await message.answer_photo(photo, f'üòç –ú–∞–ª—ã—à @{user_name} –ø–æ—Ü–µ–ª–æ–≤–∞–ª –∑–∞–π—á–∏–∫–∞ @{change_name}')
                await message.delete()

            except:
                await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')


@dp.message_handler(commands=["kill"])
async def kill(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            try:
                user_name = message.from_user.username
                who = message.text.split('@', maxsplit=1)[1]

                await asyncio.sleep(2)
                photo = open(f'{dir}imgs/kill.png', 'rb')
                await message.answer_photo(photo, f'üî™ –ú–∞–Ω—å—è–∫ @{user_name} —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ —É–±–∏–ª –±–µ–¥–Ω—è–≥—É @{who}')
                await message.delete()

            except IndexError:
                await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */kill @username*', parse_mode='Markdown')

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg*', parse_mode='Markdown')
            
        else:
            try:
                user_name = message.from_user.username
                change_name = message.reply_to_message.from_user.username

                await asyncio.sleep(2)
                photo = open(f'{dir}imgs/kill.png', 'rb')
                await message.answer_photo(photo, f'üî™ –ú–∞–Ω—å—è–∫ @{user_name} —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ —É–±–∏–ª –±–µ–¥–Ω—è–≥—É @{change_name}')
                await message.delete()
            
            except:
                await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')


@dp.message_handler(commands=["slap"])
async def slap(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            try:
                user_name = message.from_user.username
                who = message.text.split('@', maxsplit=1)[1]

                await asyncio.sleep(2)
                photo = open(f'{dir}imgs/slap.jpg', 'rb')
                await message.answer_photo(photo, f'üò§ –ë—É–ª–ª–µ—Ä @{user_name} –¥–∞–ª –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫ @{who}')
                await message.delete()

            except IndexError:
                await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */slap @username*', parse_mode='Markdown')

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg*', parse_mode='Markdown')
            
        else:
            try:
                user_name = message.from_user.username
                change_name = message.reply_to_message.from_user.username
                
                await asyncio.sleep(2)
                photo = open(f'{dir}imgs/slap.jpg', 'rb')
                await message.answer_photo(photo, f'üò§ –ë—É–ª–ª–µ—Ä @{user_name} –¥–∞–ª –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫ @{change_name}')
                await message.delete()

            except:
                await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')


@dp.message_handler(commands=["setvip"])
async def set_vip(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        user_id = message.from_user.id
        c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
        isadmin = c.fetchone()[0]

        if isadmin >= 5:
            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å VIP —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é!*', parse_mode='Markdown')
            
            else:
                try:
                    change_id = message.reply_to_message.from_user.id

                    admin_name = message.from_user.username
                    give_name = message.reply_to_message.from_user.username
                    give_vip = message.text.split(maxsplit=1)[1]

                    if int(give_vip) == 1:
                        c.execute(f"UPDATE chat_{chat_id} SET vip = ? WHERE id= ?", (int(give_vip), int(change_id)))
                        db.commit()
                        
                        await message.answer(f'üíé –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_name} –≤—ã–¥–∞–ª <b>VIP —Å—Ç–∞—Ç—É—Å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{give_name}', parse_mode= "HTML")
                        await message.delete()
                    
                    elif int(give_vip) == 0:
                        c.execute(f"UPDATE chat_{chat_id} SET vip = ? WHERE id= ?", (int(give_vip), int(change_id)))
                        db.commit()

                        await message.answer(f'üíé –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_name} —Å–Ω—è–ª <b>VIP —Å—Ç–∞—Ç—É—Å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{give_name}', parse_mode= "HTML")
                        await message.delete()
                    
                    else: 
                        return await message.reply('‚ö†Ô∏è *–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç! 1 - –≤—ã–¥–∞—Ç—å/2 - –∑–∞–±—Ä–∞—Ç—å!*', parse_mode='Markdown')

                except IndexError:
                    return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n*/setvip <1 - –≤—ã–¥–∞—Ç—å/2 - –∑–∞–±—Ä–∞—Ç—å>*', parse_mode='Markdown')

        else:
            return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 5-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')


@dp.message_handler(commands=["checkvip"])
async def check_vip(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 1:
            if message.reply_to_message is None:
                await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')

            else:
                check_id = message.reply_to_message.from_user.id
                check_name = message.reply_to_message.from_user.username

                c.execute(f"SELECT vip FROM chat_{chat_id} WHERE id = {check_id}")
                nick_check = c.fetchone()[0]

                if int(nick_check) == 1:
                    await message.answer(f'üòç –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{check_name} –∏–º–µ–µ—Ç—Å—è VIP —Å—Ç–∞—Ç—É—Å')
                    await message.delete()
                
                elif int(nick_check) == 0:
                    await message.answer(f'üòî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{check_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç VIP —Å—Ç–∞—Ç—É—Å')
                    return await message.delete()

        else:
            return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')


@dp.message_handler(commands=["unban"])
async def unban_mem(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 3:
            try:
                chat_id = message.chat.id
                banmember_id = message.text.split(maxsplit=1)[1]
                user_name = message.from_user.username

                bot.unban_chat_member(chat_id, banmember_id)

                await message.answer(f'ü•∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user_name} —Ä–∞–∑–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID <b>{banmember_id}', parse_mode= "HTML")
                await message.delete()
            
            except IndexError:
                await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */unban <user id>*", parse_mode='Markdown')

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=['chance'])
async def chance(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            user_name = message.from_user.username
            resul_rand = random.randint(0, 100)
            reson = message.text.split(maxsplit=1)[1]

            if int(resul_rand) >=90:
                await message.answer(f'üôÄ @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()

            elif int(resul_rand) >=80 and int(resul_rand) <=89:
                await message.answer(f'üòÄ @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()

            elif int(resul_rand) >=70 and int(resul_rand) <=79:
                await message.answer(f'üòÑ @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()

            elif int(resul_rand) >=60 and int(resul_rand) <=69:
                await message.answer(f'üòÖ @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()

            elif int(resul_rand) >=50 and int(resul_rand) <=59:
                await message.answer(f'üòå @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()

            elif int(resul_rand) >=40 and int(resul_rand) <=49:
                await message.answer(f'üòí @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()

            elif int(resul_rand) >=30 and int(resul_rand) <=39:
                await message.answer(f'üòî @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()

            elif int(resul_rand) >=20 and int(resul_rand) <=29:
                await message.answer(f'üò´ @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()

            elif int(resul_rand) >=10 and int(resul_rand) <=19:
                await message.answer(f'üò¢ @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()
            
            elif int(resul_rand) <=9:
                await message.answer(f'üò≠ @{user_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
                await message.delete()

            else:
                return 0

        except IndexError:
            await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n/chance *<—Ç–µ–∫—Å—Ç>*", parse_mode='Markdown')


@dp.message_handler(commands=['welcome'])
async def get_welcome(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 2:
            chat_id = message.chat.id
            chat_id=str(chat_id)

            res_chat_id = ''
            for i in range(0, len(chat_id)): 
                if i != 0: 
                    res_chat_id = res_chat_id + chat_id[i]

            c.execute(f"SELECT welcome FROM config WHERE id = {res_chat_id}")
            welcome = c.fetchone()[0]

            await message.answer(f'üëã <b>–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - <u>{welcome}</u></b>', parse_mode= "HTML")
            await message.delete()

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=['setwelcome'])
async def setwelcome(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin[0] >= 4:
            try:
                chat_id = message.chat.id
                chat_id=str(chat_id)

                res_chat_id = ''
                for i in range(0, len(chat_id)): 
                    if i != 0: 
                        res_chat_id = res_chat_id + chat_id[i]
                
                user_name = message.from_user.username
                c.execute(f"SELECT welcome FROM config WHERE id = {res_chat_id}")
                old_welcome = c.fetchone()[0]

                new_welcome = message.text.split(maxsplit=1)[1]

                welcome_info = (str(new_welcome), int(res_chat_id))
                c.execute("UPDATE config SET welcome = ? WHERE id = ?", (welcome_info))
                db.commit()
                

                await message.answer(f'üòí <b>–°—Ç–∞—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - <u>{old_welcome}</u></b>\nüòÉ <b>–ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - <u>{new_welcome}</u></b>\n\nüòá <b>–ò–∑–º–µ–Ω–∏–ª -</b> @{user_name}', parse_mode= "HTML")
                await message.delete()

            except IndexError:
                return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */setwelcome <–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ>*", parse_mode='Markdown')

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        else:
            await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 4-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=['setrules'])
async def setrules(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        izn_chat_id = message.chat.id
        izn_chat_id=str(izn_chat_id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0: 
                chat_id = chat_id + izn_chat_id[i]

        try:
            user_id = message.from_user.id
            c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {user_id}")
            isadmin = c.fetchone()[0]

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        if isadmin >= 5:
            try:
                chat_id = message.chat.id
                chat_id=str(chat_id)

                res_chat_id = ''
                for i in range(0, len(chat_id)): 
                    if i != 0: 
                        res_chat_id = res_chat_id + chat_id[i]
                
                user_name = message.from_user.username
                c.execute(f"SELECT rules FROM config WHERE id = {res_chat_id}")
                old_rules = c.fetchone()[0]

                new_rules = message.text.split(maxsplit=1)[1]

                rules_info = (str(new_rules), int(res_chat_id))
                
                c.execute("UPDATE config SET rules = ? WHERE id = ?", (rules_info))
                db.commit()
                

                await message.answer(f'üòí <b>–°—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ - <u>{old_rules}</u></b>\nüòÉ <b>–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ - <u>{new_rules}</u></b>\n\nüòá <b>–ò–∑–º–µ–Ω–∏–ª -</b> @{user_name}', parse_mode= "HTML")
                await message.delete()

            except IndexError:
                return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */setrules <–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞>*", parse_mode='Markdown')

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        else:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 5-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')


@dp.message_handler(commands=['rankinfo'])
async def rankinfo(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        return await message.reply('<b>‚ùóÔ∏è –í –±–æ—Ç–µ WonderfulBot –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π!\n\nüìå –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É –≤–∞—Å 0 —É—Ä–æ–≤–µ–Ω—å –∏ 0 EXP. –ß—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å 1 —É—Ä–æ–≤–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å 20 EXP\n–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ, –∑–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–µ—Ç—Å—è 1 EXP, –Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 3 EXP –∑–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ, –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –Ω–∞ 200 EXP –±–æ–ª—å—à–µ, —á–µ–º –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑.\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EXP - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rank. –¢–∞–∫–∂–µ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ /user(/profile). –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á—É–∂–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EXP</b>', parse_mode= "HTML")



#–ü–µ—Ä–µ–≤–æ–¥ –≤ –±–∏–Ω–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ
@dp.message_handler(commands=['binar'])
async def binar(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chisl = message.text.split(maxsplit=1)[1]
            
            if izn_chisl.startswith('0b'):
                res = int(str(izn_chisl), 2)
                await message.reply(f'ü§© –ü–µ—Ä–µ–≤–æ–¥ –¥–≤–æ–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ:\n\n\n<b>üßê –ó–∞–ø—Ä–æ—Å (–¥–≤–æ–∏—á–Ω–æ–µ): {izn_chisl}</b>\n\n<b>üìå –ü–µ—Ä–µ–≤–æ–¥ (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ): {str(res)}</b>', parse_mode= "HTML")
            
            else:
                await message.reply(f'ü§© –ü–µ—Ä–µ–≤–æ–¥ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–µ:\n\n\n<b>üßê –ó–∞–ø—Ä–æ—Å (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ): {izn_chisl}</b>\n\n<b>üìå –ü–µ—Ä–µ–≤–æ–¥ (–¥–≤–æ–∏—á–Ω–æ–µ): {int(izn_chisl):0{9 if int(izn_chisl) > 0 else 10}b}</b>', parse_mode= "HTML")
        
        except IndexError:
            await message.reply('‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /binar <b> (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–µ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (–ü—Ä–∏–º–µ—Ä: 654). –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–µ—Å—è—Ç–∏—á–µ–Ω–æ–µ –ø–µ—Ä–µ–¥ –¥–≤–æ–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å 0b) </b>', parse_mode= "HTML")
        
        except ValueError:
            await message.reply('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —á–∏—Å–µ–ª</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /binar <b>(–ß–ò–°–õ–û/–ß–ò–°–õ–û —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 0b)</b>', parse_mode= "HTML")


#–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['write'])
async def bot_write_cmd(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            say = message.text.split(maxsplit=1)[1]

        except IndexError:
            return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /write *<—Ç–µ–∫—Å—Ç>*', parse_mode='Markdown')

        if len(say) <= 256:
            try:
                await message.delete()
                await message.answer(f'ü§® <i>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>:\n\n<b>{say}</b>', parse_mode= "HTML")
                
            except:
                return await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')

        else:
            return await message.reply('‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–±–æ–ª–µ–µ 256 —Å–∏–º–≤–æ–ª–æ–≤*!', parse_mode='Markdown')


#–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, GTTS
@dp.message_handler(commands=['say'])
async def bot_say_cmd(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            say = message.text.split(maxsplit=1)[1]

        except IndexError:
            return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /say *<—Ç–µ–∫—Å—Ç>*', parse_mode='Markdown')
    
        user_id = message.from_user.id
        if len(say) <= 128:
            try: 
                var = gTTS(text = say, lang = 'ru')
                var.save(f'{user_id}.mp3')
                var = open(f'{user_id}.mp3', 'rb')

                await message.answer_audio(var)
                os.remove(f'{user_id}.mp3')

            except:
                return await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')

        else:
            return await message.reply('‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–±–æ–ª–µ–µ 128 —Å–∏–º–≤–æ–ª–æ–≤*!', parse_mode='Markdown')

@dp.message_handler(text = ['–ü—Ä–∞–≤–∏–ª–∞', '–ø—Ä–∞–≤–∏–ª–∞'])
async def every_message(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0: 
                    chat_id = chat_id + izn_chat_id[i]

            c.execute(f"SELECT rules FROM config WHERE id = {chat_id}")
            rules = c.fetchone()[0]
            await message.reply(f'<b>{rules}</b>', parse_mode= "HTML")
        
        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode='Markdown')


@dp.message_handler()
async def every_message(message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            izn_chat_id = message.chat.id
            izn_chat_id=str(izn_chat_id)

            chat_id = ''
            for i in range(0, len(izn_chat_id)): 
                if i != 0: 
                    chat_id = chat_id + izn_chat_id[i]

            user_id = message.from_user.id
            exp = 1
            
            await asyncio.sleep(3)
            c.execute(f"UPDATE chat_{chat_id} SET total_exp = total_exp + ? WHERE id= ?", (int(exp), int(user_id)))
            db.commit()
            c.execute(f"UPDATE chat_{chat_id} SET tolvl_exp = tolvl_exp + ? WHERE id= ?", (int(exp), int(user_id)))
            db.commit()

            await asyncio.sleep(1)
            c.execute(f"SELECT tolvl_exp FROM chat_{chat_id} WHERE id = {user_id}")
            messages_check = c.fetchone()[0]
            c.execute(f"SELECT need_exp FROM chat_{chat_id} WHERE id = {user_id}")
            need_check = c.fetchone()[0]

            if int(messages_check) >= int(need_check):
                level = 1
                c.execute(f"UPDATE chat_{chat_id} SET level = level + ? WHERE id= ?", (int(level), int(user_id)))
                db.commit()
                zero = 0
                c.execute(f"UPDATE chat_{chat_id} SET tolvl_exp = ? WHERE id= ?", (int(zero), int(user_id)))
                db.commit()
                dobavka = 200
                c.execute(f"UPDATE chat_{chat_id} SET need_exp = need_exp + ? WHERE id= ?", (int(dobavka), int(user_id)))
                db.commit()

                c.execute(f"SELECT level FROM chat_{chat_id} WHERE id = {user_id}")
                level_check = c.fetchone()[0]

                await message.reply(f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å!\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å - {level_check}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üíñ</b>', parse_mode= "HTML")

        except:
            pass


executor.start_polling(dp, skip_updates=True)