import random
import time
import sqlite3
import datetime
import logging
import os
import asyncio
import aiogram

from aiogram import Dispatcher, executor, types
from aiogram.dispatcher.filters import BoundFilter
from gtts import gTTS

from configs.settings import *
from utils.get_info import get_chat_db_id, is_vip

#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –±–æ—Ç—É
groups_db = sqlite3.connect('groups.db', check_same_thread=False)
groups_c = groups_db.cursor()
bot = aiogram.Bot(token, parse_mode=None)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


async def get_admin_lvl(message: types.Message):
    try:
        izn_chat_id = str(message.chat.id)

        chat_id = ''
        for i in range(0, len(izn_chat_id)): 
            if i != 0:
                chat_id = chat_id + izn_chat_id[i]

        lvl = groups_c.execute(f"SELECT admin FROM chat_{chat_id} WHERE id = {message.from_user.id}").fetchone()[0]
        return lvl
    except sqlite3.OperationalError:
        await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
        return False


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        chat_id = get_chat_db_id(message.chat.id)

        try:
            data = groups_c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {message.from_user.id}").fetchone()

            if data is None:
                user_info = (message.from_user.id, message.from_user.username, 0, message.from_user.first_name, 0, 0, 0, 0, 20, 0)
                groups_c.execute(f"INSERT INTO chat_{chat_id}(id, login, admin, nick, warns, vip, total_exp, tolvl_exp, need_exp, level) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",(user_info))
                groups_db.commit()
                return await message.reply("‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–µ—Å–µ–¥–µ!*", parse_mode='Markdown')
            else:
                return await message.reply("‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –±–µ—Å–µ–¥–µ*!", parse_mode='Markdown')

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


class check_admin(BoundFilter):
    key = 'is_admin'
    def __init__(self, is_admin):
        self.is_admin = is_admin

    async def check(self, message):
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.is_chat_admin()

dp.filters_factory.bind(check_admin)
@dp.message_handler(commands=["startbot"], is_admin=True)
async def botstart(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            chat_id = get_chat_db_id(message.chat.id)
            data = groups_c.execute(f"SELECT id FROM config WHERE id = {chat_id}").fetchone()
            
            if data is None and (message.chat.type == "group" or "supergroup"):
                start_info = (message.from_user.id, message.from_user.username, 6, message.from_user.first_name, 0, 1, 0, 0, 20, 0)
                config_info = (chat_id, standart_welcome, "–ü—Ä–∞–≤–∏–ª–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
                groups_c.execute(f"CREATE TABLE IF NOT EXISTS chat_{chat_id}(id INT, login TEXT, admin INT, nick TEXT, warns INT, vip INT, total_exp INT, tolvl_exp INT, need_exp INT, level INT)")                
                groups_c.execute(f"INSERT INTO chat_{chat_id} (id, login, admin, nick, warns, vip, total_exp, tolvl_exp, need_exp, level) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (start_info))
                groups_c.execute("INSERT INTO config (id, welcome, rules) VALUES (?, ?, ?)", (config_info))
                groups_db.commit()
                await message.reply("‚úÖ *–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –±–µ—Å–µ–¥–µ! –í–∞–º –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 6 —É—Ä–æ–≤–Ω—è –∏ VIP —Å—Ç–∞—Ç—É—Å*\n\n*‚ùóÔ∏è –ù–∞–ø—É—Ç—Å—Ç–≤–∏–µ:\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–∞–≤–∏–ª–∞*!", parse_mode='Markdown')
            
            else:
                await message.reply('‚ùå –ë–æ—Ç *—É–∂–µ* –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ!', parse_mode='Markdown')
        except:
            await message.answer(f'üìÑ *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', parse_mode='Markdown')


@dp.message_handler(commands=["help"])
async def help(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        return await message.reply('*–ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*:\n*–û—Å–Ω–æ–≤–Ω–æ–µ*:\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/start - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ\n/profile(/user) - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)\n/rank - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EXP(–ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ EXP –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)\n/botinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/rankinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —É—Ä–æ–≤–Ω–µ–π –∏ EXP\n*–ü—Ä–∞–≤–∏–ª–∞* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n\n*–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è*:\n/mynick *<–Ω–æ–≤—ã–π –Ω–∏–∫>* - –∏–∑–º–µ–Ω–∏—Ç—å —Å–µ–±–µ –Ω–∏–∫\n/random(/rand) *<–æ—Ç> <–¥–æ>* - —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ\n/chance *<text>* - —É–∑–Ω–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ text\n/binar *<–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (–ø—Ä–µ—Ñ–∏–∫—Å 0b)>* - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω–æ–µ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç\n/say *<—Ç–µ–∫—Å—Ç>* - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞\n/write *<—Ç–µ–∫—Å—Ç>* - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞\n\n*–†–ü –∫–æ–º–∞–Ω–¥—ã*:\n/ebaca(/sex) - —Ç—Ä–∞—Ö–Ω—É—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n/kiss - –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n/slap - –¥–∞—Ç—å –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é\n/kill - —É–±–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è', parse_mode= "Markdown")

@dp.message_handler(commands=['rankinfo'])
async def rankinfo(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        return await message.reply('‚ùóÔ∏è<b>–í –±–æ—Ç–µ WonderfulBot –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π!\n\nüìå –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É –≤–∞—Å 0 —É—Ä–æ–≤–µ–Ω—å –∏ 0 EXP. –ß—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å 1 —É—Ä–æ–≤–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å 20 EXP\n–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ, –∑–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–µ—Ç—Å—è 1 EXP, –Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 3 EXP –∑–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ, –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –Ω–∞ 200 EXP –±–æ–ª—å—à–µ, —á–µ–º –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑.\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EXP - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rank. –¢–∞–∫–∂–µ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ /user(/profile). –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á—É–∂–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EXP</b>', parse_mode= "HTML")

@dp.message_handler(commands=["botinfo"])
async def botinfo(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        return await message.reply(f'üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ *WonderfulBot*:\n\nüíø *–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version}*\nü§ì *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º* - /help\n‚òïÔ∏è *–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞* - [—Ç—ã–∫]({tg_channel})', parse_mode='Markdown')


@dp.message_handler(content_types=['new_chat_members'])
async def welcome(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        chat_id = get_chat_db_id(message.chat.id)
        
        try:
            data = groups_c.execute(f"SELECT welcome FROM config WHERE id = {chat_id}").fetchone()
            isExistsUser = groups_c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {message.new_chat_members[0].id}").fetchone()
        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
        
        if isExistsUser is None:
            try:
                user_info = (message.new_chat_members[0].id, message.new_chat_members[0].username, 0, message.new_chat_members[0].first_name, 0, 0, 0, 0, 20, 0)
                groups_c.execute(f"INSERT INTO chat_{chat_id}(id, login, admin, nick, warns, vip, total_exp, tolvl_exp, need_exp, level) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (user_info))
                groups_db.commit()
                return await message.answer(f'@{message.new_chat_members[0].username}\n{data[0]}')
            except:
                return await message.answer(f'@{message.new_chat_members[0].username}\n{data[0]}')
            
        else:
            try:
                groups_c.execute(f"UPDATE chat_{chat_id} SET admin = 0 WHERE id = ?", (message.new_chat_members[0].id))
                groups_db.commit()
                return await message.answer(f'@{message.new_chat_members[0].username}\n{data[0]}')
            except:
                return await message.answer(f'@{message.new_chat_members[0].username}\n{data[0]}')


@dp.message_handler(commands=["reg"])
async def reg_mem(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        get_admin = await get_admin_lvl(message)
        if get_admin is False:
            return
        if int(get_admin) < 1:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
        
        try:
            chat_id = get_chat_db_id(message.chat.id)
            data = groups_c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {message.reply_to_message.from_user.id}").fetchone()
            if data == None:
                user_info = (message.reply_to_message.from_user.id, message.reply_to_message.from_user.username, 0, message.reply_to_message.from_user.first_name, 0, 0, 0, 0, 20, 0)
                groups_c.execute(f"INSERT INTO chat_{chat_id} (id, login, admin, nick, warns, vip, total_exp, tolvl_exp, need_exp, level) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (user_info))
                groups_db.commit()

                await message.answer(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>@{message.from_user.username}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{message.reply_to_message.from_user.username}</b>', parse_mode='HTML')
                return await message.delete()
            else:
                return await message.reply('‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*', parse_mode='Markdown')
        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")    


@dp.message_handler(commands=['kick'])
async def kick_member(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        get_admin = await get_admin_lvl(message)
        if get_admin is False:
            return
        if int(get_admin) < 1:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
            
        try:
            if message.reply_to_message is None:
                try:
                    kickmem_name = message.get_args().split('@')[1]
                except:
                    return await message.reply("‚ùå *–í—ã –Ω–µ —É–ø–æ–º—è–Ω—É–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∏–∫–∞!*", parse_mode='Markdown')
                
                kickmem_id = groups_c.execute(f"SELECT id FROM chat_{message.chat.id} WHERE login = {kickmem_name}").fetchone()[0]
                        
                await bot.kick_chat_member(message.chat.id, kickmem_id, 30)
                await message.answer(f'üò± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∫–∏–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{kickmem_name}', parse_mode= "HTML")
                return await message.delete()

            else:
                await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id, 30)
                await message.answer(f'üò± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∫–∏–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username}', parse_mode= "HTML")
                return await message.delete()

        except aiogram.utils.exceptions.CantRestrictSelf:
            return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –º–µ–Ω—è!*", parse_mode='Markdown')
        except aiogram.utils.exceptions.UserIsAnAdministratorOfTheChat:
            return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')
        except aiogram.utils.exceptions.CantRestrictChatOwner:
            return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')



@dp.message_handler(commands=['getid', 'gid'])
async def get_id(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            return await message.answer('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ ID!*', parse_mode='Markdown')
        
        await message.answer(f'üîç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} - <b>{message.reply_to_message.from_user.id}</b>', parse_mode= "HTML")
        return await message.delete()


@dp.message_handler(commands=['makeadmin'])
async def set_admin(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        get_admin = await get_admin_lvl(message)
        
        if get_admin is False:
            return
        if get_admin < 5:
            return await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç 5-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!", parse_mode='Markdown')
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –Ω–∞ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!*', parse_mode='Markdown')
            
        try:
            makeadmin_lvl = message.get_args()
            if makeadmin_lvl is None or makeadmin_lvl == ' ' or makeadmin_lvl == '':
                return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */makeadmin <level>*!", parse_mode='Markdown')

            if int(makeadmin_lvl) <= -1:
                return await message.reply("*–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å -1 –∏ –º–µ–Ω—å—à–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
            elif int(makeadmin_lvl) >= 6:
                return await message.reply("*–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 6 –∏ –±–æ–ª—å—à–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
            
            chat_id = get_chat_db_id(message.chat.id)
            checkadmin = groups_c.execute(f"SELECT admin FROM chat_{chat_id} WHERE id = {message.reply_to_message.from_user.id}").fetchone()

            if checkadmin is not None and int(checkadmin[0]) >= 5:
                return await message.reply("‚ö†Ô∏è *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å/—Å–Ω—è—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')

            groups_c.execute(f"UPDATE chat_{chat_id} SET admin=? WHERE id={message.reply_to_message.from_user.id}", (int(makeadmin_lvl),))
            groups_db.commit()

            await message.answer(f'üëÆ –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –Ω–∞–∑–Ω–∞—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {makeadmin_lvl} —É—Ä–æ–≤–Ω—è</b>', parse_mode= "HTML")
            return await message.delete()
            
        except ValueError:
            return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */makeadmin <level>! –ê—Ä–≥—É–º–µ–Ω—Ç <level> - —á–∏—Å–ª–æ*!", parse_mode='Markdown')           


@dp.message_handler(commands=["mute"])
async def mute(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        get_admin = await get_admin_lvl(message)
        if get_admin is False:
            return
        if get_admin < 1:
            return await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!", parse_mode='Markdown')
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–º—É—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
        
        try:
            mute_time = message.get_args()
            if mute_time is None or mute_time == ' ' or mute_time == '':
                return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */mute <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>*!", parse_mode='Markdown')

            new = {'can_send_messages': False, 'can_send_media_messages': False,'can_send_polls': False,'can_send_other_messages': False, 'can_add_web_page_previews': False,}
            await bot.restrict_chat_member(chat_id = message.chat.id, user_id = message.reply_to_message.from_user.id,  permissions= new, until_date=time.time() + int(mute_time)*60)

            if int(mute_time) >= 1:                                                
                await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∑–∞–º—É—Ç–∏–ª @{message.reply_to_message.from_user.username} –Ω–∞ <b>{mute_time} –º–∏–Ω—É—Ç</b>', parse_mode= "HTML")
                return await message.delete()
            else:
                await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∑–∞–º—É—Ç–∏–ª @{message.reply_to_message.from_user.username} <b>–Ω–∞–≤—Å–µ–≥–¥–∞</b>', parse_mode= "HTML")
                return await message.delete()
        
        except aiogram.utils.exceptions.CantRestrictSelf:
            return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –º–µ–Ω—è!*", parse_mode='Markdown')
        except aiogram.utils.exceptions.UserIsAnAdministratorOfTheChat:
            return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')
        except aiogram.utils.exceptions.CantRestrictChatOwner:
            return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')   


@dp.message_handler(commands=["unmute"])
async def unmute(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        get_admin = await get_admin_lvl(message)
        if get_admin is False:
            return
        if get_admin < 1:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º—É—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
        
        try:
            new = {'can_send_messages': True, 'can_send_media_messages': True,'can_send_polls': True,'can_send_other_messages': True, 'can_add_web_page_previews': True,}
            await bot.restrict_chat_member(chat_id = message.chat.id, user_id = message.reply_to_message.from_user.id, permissions=new)
            await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} —Ä–∞–∑–º—É—Ç–∏–ª @{message.reply_to_message.from_user.username}', parse_mode= "HTML")
            return await message.delete()

        except aiogram.utils.exceptions.CantRestrictSelf:
            return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å –º–µ–Ω—è!*", parse_mode='Markdown')
        except aiogram.utils.exceptions.UserIsAnAdministratorOfTheChat:
            return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')
        except aiogram.utils.exceptions.CantRestrictChatOwner:
            return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode='Markdown')            


@dp.message_handler(commands=["ahelp"])
async def ahelp(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 1:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        
        if admin_lvl == 1:
            return await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:' + '\n\n*1-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/ahelp - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/kick - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/mute <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö> - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unmute - —Å–Ω—è—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/getid(/gid) - —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/getnick(/gnick) - —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/checkvip - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞\n/reg - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', parse_mode= "Markdown")
        elif admin_lvl == 2:
            return await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:' + '\n\n*1-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/ahelp - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/kick - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/mute *<–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>* - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unmute - —Å–Ω—è—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/getid(/gid) - —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/getnick(/gnick) - —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/checkvip - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞\n/reg - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n*2-–æ–π —É—Ä–æ–≤–µ–Ω—å*:\n/pin - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpin - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpinall - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n/welcome - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/clear <–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π> - –æ—á–∏—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', parse_mode= "Markdown")
        elif admin_lvl == 3:
            return await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:' + '\n\n*1-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/ahelp - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/kick - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/mute *<–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>* - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unmute - —Å–Ω—è—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/getid(/gid) - —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/getnick(/gnick) - —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/checkvip - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞\n/reg - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n*2-–æ–π —É—Ä–æ–≤–µ–Ω—å*:\n/pin - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpin - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpinall - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n/welcome - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/clear <–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π> - –æ—á–∏—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n*3-–∏–π —É—Ä–æ–≤–µ–Ω—å*:\n/ban *<–≤—Ä–µ–º—è –≤ –¥–Ω—è—Ö>* - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unban *<id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å>* - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/warn - –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/unwarn - —Å–Ω—è—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/setnick *<–Ω–æ–≤—ã–π –Ω–∏–∫>* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', parse_mode= "Markdown")
        elif admin_lvl == 4:
            return await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:' + '\n\n*1-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/ahelp - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/kick - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/mute *<–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>* - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unmute - —Å–Ω—è—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/getid(/gid) - —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/getnick(/gnick) - —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/checkvip - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞\n/reg - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n*2-–æ–π —É—Ä–æ–≤–µ–Ω—å*:\n/pin - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpin - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpinall - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n/welcome - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/clear <–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π> - –æ—á–∏—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n*3-–∏–π —É—Ä–æ–≤–µ–Ω—å*:\n/ban *<–≤—Ä–µ–º—è –≤ –¥–Ω—è—Ö>* - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unban *<id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å>* - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/warn - –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/unwarn - —Å–Ω—è—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/setnick *<–Ω–æ–≤—ã–π –Ω–∏–∫>* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n*4-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/title *<–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n/description(/desc) *<–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>* - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n/setwelcome *<–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ> - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ*', parse_mode= "Markdown")
        elif admin_lvl >= 5:
            return await message.reply('–ö–æ–º–∞–Ω–¥—ã *–∫—Ä–∞—Å–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*:' + '\n\n*1-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/ahelp - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/kick - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/mute *<–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>* - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unmute - —Å–Ω—è—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/getid(/gid) - —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/getnick(/gnick) - —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/checkvip - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞\n/reg - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n*2-–æ–π —É—Ä–æ–≤–µ–Ω—å*:\n/pin - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpin - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n/unpinall - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n/welcome - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/clear <–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π> - –æ—á–∏—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n*3-–∏–π —É—Ä–æ–≤–µ–Ω—å*:\n/ban *<–≤—Ä–µ–º—è –≤ –¥–Ω—è—Ö>* - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unban *<id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å>* - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/warn - –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/unwarn - —Å–Ω—è—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/setnick *<–Ω–æ–≤—ã–π –Ω–∏–∫>* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n*4-—ã–π —É—Ä–æ–≤–µ–Ω—å*:\n/title *<–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n/description(/desc) *<–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>* - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n/setwelcome *<–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ> - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ*\n\n*–í–ª–∞–¥–µ–ª–µ—Ü –±–µ—Å–µ–¥—ã*:\n/makeadmin *<—É—Ä–æ–≤–µ–Ω—å>* - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–¥–º–∏–Ω–∫—É\n/setvip *<1 - –≤—ã–¥–∞—Ç—å/2 - –∑–∞–±—Ä–∞—Ç—å>* - –≤—ã–¥–∞—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å VIP —Å—Ç–∞—Ç—É—Å\n/setrules *<–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞>* - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞', parse_mode= "Markdown")


@dp.message_handler(commands=["pin"])
async def pin_mes(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 2:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –µ–≥–æ!')

        await bot.pin_chat_message(message.chat.id, message.reply_to_message.message_id)
        await message.answer(f'üìå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} <b>–∑–∞–∫—Ä–µ–ø–∏–ª</b> —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID <b>{message.reply_to_message.message_id}</b>', parse_mode= "HTML")
        return await message.delete()


@dp.message_handler(commands=["unpin"])
async def unpin_mes(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 2:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –µ–≥–æ!')

        await bot.unpin_chat_message(message.chat.id, message.reply_to_message.message_id)
        await message.answer(f'üìå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} <b>–æ—Ç–∫—Ä–µ–ø–∏–ª</b> —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID <b>{message.reply_to_message.message_id}</b>', parse_mode= "HTML")
        return await message.delete()


@dp.message_handler(commands=["unpinall"])
async def unpin_all(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 2:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        
        await bot.unpin_all_chat_messages(message.chat.id)
        await message.answer(f'üìå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} <b>–æ—Ç–∫—Ä–µ–ø–∏–ª –≤—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>', parse_mode= "HTML")
        return await message.delete()


@dp.message_handler(commands=["title"])
async def set_title(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 4:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 4-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        
        new_title = message.get_args()
        if new_title is None or new_title == ' ' or new_title == '':
            return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */title <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>*!", parse_mode='Markdown')
                
        await bot.set_chat_title(message.chat.id, new_title)
        await message.answer(f'üç© –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã –Ω–∞ <b>{new_title}</b>', parse_mode= "HTML")
        return await message.delete()



@dp.message_handler(commands=["ban"])
async def ban_mem(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 3:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        if message.reply_to_message is None:
            await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode= "Markdown")
            
        else:
            until_date = message.get_args()
            if until_date is None or until_date == ' ' or until_date == '':
                return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */ban <—Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö>*!", parse_mode='Markdown')
                            
            try:
                isvip = groups_c.execute(f"SELECT vip FROM chat_{get_chat_db_id(message.chat.id)} WHERE id = {message.reply_to_message.from_user.id}").fetchone()[0]
                if int(isvip) == 1 and int(until_date) > 10:
                    return await message.reply('‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 10 –¥–Ω–µ–π!')
            except TypeError:
                pass
            
            try:
                await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=time.time() + int(until_date)*86400)
            except aiogram.utils.exceptions.CantRestrictSelf:
                return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –º–µ–Ω—è!*", parse_mode= "Markdown")
            except aiogram.utils.exceptions.UserIsAnAdministratorOfTheChat:
                return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode= "Markdown")
            except aiogram.utils.exceptions.CantRestrictChatOwner:
                return await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode= "Markdown")
                
            if int(until_date) >= 1:
                await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} –Ω–∞ <b>{until_date} –¥–Ω–µ–π</b>', parse_mode= "HTML")                
                return await message.delete()
            else:
                await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} <b>–Ω–∞–≤—Å–µ–≥–¥–∞</b>', parse_mode= "HTML")
                return await message.delete()


@dp.message_handler(commands=["warn"])
async def warn_mem(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 3:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–≤–∞—Ä–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode= "Markdown")

        chat_id = get_chat_db_id(message.chat.id)

        data = groups_c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = {message.reply_to_message.from_user.id}").fetchone()
        if data == None:
            return await message.reply('‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /reg*', parse_mode= "Markdown")

        groups_c.execute(f"UPDATE chat_{chat_id} SET warns = warns + {1} WHERE id= ?", (message.reply_to_message.from_user.id,))
        groups_db.commit()
        warns_total = groups_c.execute(f"SELECT warns FROM chat_{chat_id} WHERE id = ?", (message.reply_to_message.from_user.id,)).fetchone()[0]
        await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} <b>–≤—ã–¥–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username}\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {warns_total}', parse_mode= "HTML")
        return await message.delete()


@dp.message_handler(commands=["unwarn"])
async def unwarn_mem(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 3:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–≤–∞—Ä–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode= "Markdown")
        
        chat_id = get_chat_db_id(message.chat.id)
        total_warns = groups_c.execute(f"SELECT warns FROM chat_{chat_id} WHERE id = ?", (message.reply_to_message.from_user.id,)).fetchone()[0]
                
        if total_warns is None or total_warns <= 0:
            return await message.reply('‚õîÔ∏è *–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!*', parse_mode='Markdown')
                
        groups_c.execute(f"UPDATE chat_{chat_id} SET warns = warns - {1} WHERE id = ?", (message.reply_to_message.from_user.id,))
        groups_db.commit()
        total_warns = groups_c.execute(f"SELECT warns FROM chat_{chat_id} WHERE id = ?", (message.reply_to_message.from_user.id,)).fetchone()[0]

        await message.answer(f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} —Å–Ω—è–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å <b>{total_warns} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</b>', parse_mode= "HTML")
        return await message.delete()


@dp.message_handler(commands=["user", "profile", "stats"])
async def check_stat(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        chat_id = get_chat_db_id(message.chat.id)
        if message.reply_to_message is None:
            try:
                check_info = groups_c.execute(f"SELECT nick, warns, level, total_exp, tolvl_exp, need_exp, vip FROM chat_{chat_id} WHERE id = {message.from_user.id}").fetchone()
                if check_info is None:
                    return await message.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start*', parse_mode= "Markdown")
                return await message.reply(f'<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}</b>\n\nüí¶ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <b>{check_info[0]}</b>\nüëë VIP: <b>{is_vip(state=check_info[6])}</b>\nüéì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ - <b>{check_info[1]}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_info[2]}</b>. –í—Å–µ–≥–æ - <b>{check_info[3]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_info[4]} EXP –∏–∑ {check_info[5]} EXP</b>', parse_mode= "HTML")
            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        else:
            try:
                check_info = groups_c.execute(f"SELECT nick, warns, level, total_exp, tolvl_exp, need_exp, vip FROM chat_{chat_id} WHERE id = ?", (message.reply_to_message.from_user.id,)).fetchone()
                if check_info is None:
                    return await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start*', parse_mode= "Markdown")
                return await message.reply(f'<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username}</b>\n\nüí¶ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <b>{check_info[0]}</b>\nüëë VIP: <b>{is_vip(state=check_info[6])}</b>\nüéì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ - <b>{check_info[1]}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_info[2]}</b>. –í—Å–µ–≥–æ - <b>{check_info[3]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_info[4]} EXP –∏–∑ {check_info[5]} EXP</b>', parse_mode= "HTML")
            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")



@dp.message_handler(commands=["rank"])
async def set_nick(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        chat_id = get_chat_db_id(message.chat.id)

        if message.reply_to_message is None:
            try:
                check_level = groups_c.execute(f"SELECT level, total_exp, tolvl_exp, need_exp FROM chat_{chat_id} WHERE id = ?", (message.from_user.id,)).fetchone()
                if check_level is None:
                    return await message.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start*', parse_mode= "Markdown")
                return await message.reply(f'<b>–ö–∞—Ä—Ç–æ—á–∫–∞ @{message.from_user.username}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_level[0]}</b>. –í—Å–µ–≥–æ - <b>{check_level[1]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_level[2]} EXP –∏–∑ {check_level[3]} EXP</b>', parse_mode= "HTML")
            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        else:
            try:
                check_level = groups_c.execute(f"SELECT level, total_exp, tolvl_exp, need_exp FROM chat_{chat_id} WHERE id = ?", (message.reply_to_message.from_user.id,)).fetchone()
                if check_level is None:
                    return await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start*', parse_mode= "Markdown")
                return await message.reply(f'<b>–ö–∞—Ä—Ç–æ—á–∫–∞ @{message.reply_to_message.from_user.username}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_level[0]}</b>. –í—Å–µ–≥–æ - <b>{check_level[1]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_level[2]} EXP –∏–∑ {check_level[3]} EXP</b>', parse_mode= "HTML")

            except sqlite3.OperationalError:
                return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


@dp.message_handler(commands=["mynick"])
async def mynick(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            chat_id = get_chat_db_id(message.chat.id)
            new_nick = message.get_args()
            if new_nick is None or new_nick == ' ' or new_nick == '':
                return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */mynick <–Ω–æ–≤—ã–π –Ω–∏–∫>*!', parse_mode='Markdown')
                
            groups_c.execute(f"SELECT id FROM chat_{chat_id} WHERE id = ?", (message.from_user.id,))
            groups_c.execute(f"UPDATE chat_{chat_id} SET nick = ? WHERE id= ?", (new_nick, message.from_user.id))
            groups_db.commit()
            
            await message.answer(f'üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –Ω–∏–∫ –Ω–∞ <b>{new_nick}</b>', parse_mode= "HTML")
            return await message.delete()            
        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


@dp.message_handler(commands=["setnick", "snick"])
async def set_another_nick(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 3:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 3-–µ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode= "Markdown")
        try:
            new_nick = message.get_args()
            if new_nick is None or new_nick == ' ' or new_nick == '':
                return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */setnick <–Ω–æ–≤—ã–π –Ω–∏–∫>*!', parse_mode='Markdown')
            
            groups_c.execute(f"UPDATE chat_{get_chat_db_id(message.chat.id)} SET nick = ? WHERE id= ?", (new_nick, message.reply_to_message.from_user.id))
            groups_db.commit()

            await message.answer(f'üí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>@{message.from_user.username}</b> –∏–∑–º–µ–Ω–∏–ª –Ω–∏–∫ <b>@{message.reply_to_message.from_user.username}</b> –Ω–∞ <b>{new_nick}</b>', parse_mode= "HTML")
            return await message.delete()

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


@dp.message_handler(commands=["gnick", "getnick"])
async def get_another_nick(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
            
        chat_id = get_chat_db_id(message.chat.id)

        try:
            check_nick = groups_c.execute(f"SELECT nick FROM chat_{chat_id} WHERE id = ?", (message.reply_to_message.from_user.id,)).fetchone()[0]
        except TypeError:
            await message.answer(f'üòê –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{message.reply_to_message.from_user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>!', parse_mode= "HTML")
            return await message.delete()
        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        await message.answer(f'üíæ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{message.reply_to_message.from_user.username}</b> ‚Äî <b>{check_nick}</b>', parse_mode= "HTML")
        return await message.delete()


@dp.message_handler(commands=["clear"])
async def clear_chat(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 2:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        try:
            clear = int(message.get_args())
            if clear is None or clear == ' ' or clear == '':
                return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */clear <–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π>*!', parse_mode='Markdown')
        except ValueError:
            return await message.reply("‚ö†Ô∏è *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*", parse_mode='Markdown')
        
        message_id = message.message_id
        i = 0
        exceptions = 0
        while i < int(clear):
            if exceptions >= 50:
                await message.answer(f'üò¢ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ!\n–ë—ã–ª–æ –æ—á–∏—â–µ–Ω–æ —Ç–æ–ª—å–∫–æ <b>{i}</b> –∏–∑ <b>{clear}</b> —Å–æ–æ–±—â–µ–Ω–∏–π', parse_mode= "HTML")
                break

            try:
                message_id -= 1
                await bot.delete_message(message.chat.id, message_id)
                i += 1
            except aiogram.utils.exceptions.MessageCantBeDeleted:
                await message.answer(f'‚úÖ –ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ <b>{i}</b> –∏–∑ <b>{clear}</b> —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑-–∑–∞ <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram</b>!', parse_mode= "HTML")
                break
            except aiogram.utils.exceptions.MessageToDeleteNotFound:
                exceptions += 1 
        else:
            return await message.answer(f'‚úÖ –ë—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã –≤—Å–µ <b>{i}</b> –∏–∑ <b>{clear}</b> —Å–æ–æ–±—â–µ–Ω–∏–π!', parse_mode= "HTML")


@dp.message_handler(commands=["rand", "random"])
async def random_chisl(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            from_num, to_num = message.get_args().split(' ', maxsplit=1)

            resul_rand = random.randint(int(from_num), int(to_num))
            await message.answer(f'üé≤ @{message.from_user.username}, –≤–∞—à–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç <b>{from_num}</b> –¥–æ <b>{to_num}</b> ‚Äî <b>{resul_rand}</b>', parse_mode= "HTML")
            return await message.delete()

        except IndexError:
            return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */rand <–æ—Ç> <–¥–æ>**", parse_mode='Markdown')

        except ValueError:
            return await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –∏–ª–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */rand <–û–¢> <–î–û>*", parse_mode='Markdown')



@dp.message_handler(commands=["desc", "description"])
async def set_desc(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 4:
            return await message.reply("‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 4-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*", parse_mode='Markdown')
        
        new_title = message.get_args()
        if new_title is None or new_title == ' ' or new_title == '':
            return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */description <new description>*!", parse_mode='Markdown')

        await bot.set_chat_description(message.chat.id, new_title)
        await message.answer(f'üò± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>@{message.from_user.username}</b> –∏–∑–º–µ–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã –Ω–∞ <b>{new_title}</b>', parse_mode= "HTML")
        await message.delete()


@dp.message_handler(commands=["sex", "ebaca"])
async def sex_ebaca(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            who = message.get_args()
            if who is None:
                return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */sex @username*', parse_mode='Markdown')

            photo = open(f'{dir}/data/imgs/ebat.jpg', 'rb')
            await message.answer_photo(photo, f'üëâüëà –ü—É–ø—Å–∏–∫ @{message.from_user.username} —Ç—Ä–∞—Ö–Ω—É–ª —Å–µ–∫—Å-–º–∞—à–∏–Ω—É {who}')
            return await message.delete()
            
        else:
            try:
                photo = open(f'{dir}/data/imgs/ebat.jpg', 'rb')
                await message.answer_photo(photo, f'üëâüëà –ü—É–ø—Å–∏–∫ @{message.from_user.username} —Ç—Ä–∞—Ö–Ω—É–ª —Å–µ–∫—Å-–º–∞—à–∏–Ω—É @{message.reply_to_message.from_user.username}')
                return await message.delete()
            except:
                return await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')


@dp.message_handler(commands=["kiss"])
async def kiss(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            who = message.get_args()
            if who is None:
                return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */kiss @username*', parse_mode='Markdown')

            photo = open(f'{dir}/data/imgs/kiss.png', 'rb')
            await message.answer_photo(photo, f'üòç –ú–∞–ª—ã—à @{message.from_user.username} –ø–æ—Ü–µ–ª–æ–≤–∞–ª –∑–∞–π—á–∏–∫–∞ {who}')
            return await message.delete()
            
        else:
            try:
                photo = open(f'{dir}/data/imgs/kiss.png', 'rb')
                await message.answer_photo(photo, f'üòç –ú–∞–ª—ã—à @{message.from_user.username} –ø–æ—Ü–µ–ª–æ–≤–∞–ª –∑–∞–π—á–∏–∫–∞ @{message.reply_to_message.from_user.username}')
                return await message.delete()
            except:
                return await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')


@dp.message_handler(commands=["kill"])
async def kill(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            who = message.get_args()
            if who is None:
                return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */kill @username*', parse_mode='Markdown')

            photo = open(f'{dir}//data//imgs/kill.png', 'rb')
            await message.answer_photo(photo, f'üî™ –ú–∞–Ω—å—è–∫ @{message.from_user.username} —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ —É–±–∏–ª –±–µ–¥–Ω—è–≥—É {who}')
            return await message.delete()
            
        else:
            try:
                photo = open(f'{dir}//data//imgs/kill.png', 'rb')
                await message.answer_photo(photo, f'üî™ –ú–∞–Ω—å—è–∫ @{message.from_user.username} —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ —É–±–∏–ª –±–µ–¥–Ω—è–≥—É @{message.reply_to_message.from_user.username}')
                return await message.delete()
            except:
                return await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')


@dp.message_handler(commands=["slap"])
async def slap(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if message.reply_to_message is None:
            who = message.get_args()
            if who is None:
                return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */slap @username*', parse_mode='Markdown')

            photo = open(f'{dir}imgs/slap.jpg', 'rb')
            await message.answer_photo(photo, f'üò§ –ë—É–ª–ª–µ—Ä @{message.from_user.username} –¥–∞–ª –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫ {who}')
            return await message.delete()
            
        else:
            try:
                photo = open(f'{dir}imgs/slap.jpg', 'rb')
                await message.answer_photo(photo, f'üò§ –ë—É–ª–ª–µ—Ä @{message.from_user.username} –¥–∞–ª –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫ @{message.reply_to_message.from_user.username}')
                return await message.delete()
            except:
                return await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')


@dp.message_handler(commands=["setvip"])
async def set_vip(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 5:
            return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 5-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')
        
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å VIP —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é!*', parse_mode='Markdown')
        
        chat_id = get_chat_db_id(message.chat.id)
        give_vip = message.get_args()
        if give_vip is None or give_vip == ' ' or give_vip == '':
                return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n*/setvip <1 - –≤—ã–¥–∞—Ç—å/2 - –∑–∞–±—Ä–∞—Ç—å>*', parse_mode='Markdown')

        if give_vip == '0':
                groups_c.execute(f"UPDATE chat_{chat_id} SET vip = '0' WHERE id= ?", (message.reply_to_message.from_user.id,))
                groups_db.commit()

                await message.answer(f'üíé –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} —Å–Ω—è–ª <b>VIP —Å—Ç–∞—Ç—É—Å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username}', parse_mode= "HTML")
                return await message.delete()
        elif give_vip == '1':
                groups_c.execute(f"UPDATE chat_{chat_id} SET vip = '1' WHERE id= ?", (message.reply_to_message.from_user.id,))
                groups_db.commit()
                        
                await message.answer(f'üíé –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –≤—ã–¥–∞–ª <b>VIP —Å—Ç–∞—Ç—É—Å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username}', parse_mode= "HTML")
                return await message.delete()
        else:
            return await message.reply('‚ö†Ô∏è *–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç! 1 - –≤—ã–¥–∞—Ç—å/2 - –∑–∞–±—Ä–∞—Ç—å!*', parse_mode='Markdown')            


@dp.message_handler(commands=["checkvip"])
async def check_vip(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 5:
            return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 5-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')
        
        if message.reply_to_message is None:
            return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')

        chat_id = get_chat_db_id(message.chat.id)
        nick_check = groups_c.execute(f"SELECT vip FROM chat_{chat_id} WHERE id = ?", (message.reply_to_message.from_user.id,)).fetchone()[0]

        if int(nick_check) == 1:
            await message.answer(f'üòç –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} –∏–º–µ–µ—Ç—Å—è VIP —Å—Ç–∞—Ç—É—Å')
            return await message.delete()
                
        elif int(nick_check) == 0:
            await message.answer(f'üòî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç VIP —Å—Ç–∞—Ç—É—Å')
            return await message.delete()
        

@dp.message_handler(commands=["unban"])
async def unban_mem(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 3:
            return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 5-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')

        unbanmember_id = message.get_args()
        if unbanmember_id is None or unbanmember_id == ' ' or unbanmember_id == '':
            return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */unban <user id>*", parse_mode='Markdown')

        await bot.unban_chat_member(message.chat.id, unbanmember_id)
        await message.answer(f'ü•∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} —Ä–∞–∑–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID <b>{unbanmember_id}</b>', parse_mode= "HTML")
        return await message.delete()


@dp.message_handler(commands=['chance'])
async def chance(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        resul_rand = random.randint(0, 100)
        reson = message.get_args()
        if reson is None or reson == ' ' or reson == '':
            return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n/chance *<—Ç–µ–∫—Å—Ç>*", parse_mode='Markdown')

        if resul_rand >=90:
            await message.answer(f'üôÄ @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()
        elif resul_rand >=80 and resul_rand <=89:
            await message.answer(f'üòÄ @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()
        elif resul_rand >=70 and resul_rand <=79:
            await message.answer(f'üòÑ @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()
        elif resul_rand >=60 and resul_rand <=69:
            await message.answer(f'üòÖ @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()
        elif resul_rand >=50 and resul_rand <=59:
            await message.answer(f'üòå @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()
        elif resul_rand >=40 and resul_rand <=49:
            await message.answer(f'üòí @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()
        elif resul_rand >=30 and resul_rand <=39:
            await message.answer(f'üòî @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()
        elif resul_rand >=20 and resul_rand <=29:
            await message.answer(f'üò´ @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()
        elif resul_rand >=10 and resul_rand <=19:
            await message.answer(f'üò¢ @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()  
        elif resul_rand <=9:
            await message.answer(f'üò≠ @{message.from_user.username}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ <b>{reson}</b>, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")
            return await message.delete()


@dp.message_handler(commands=['welcome'])
async def get_welcome(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 2:
            return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')
            
        chat_id = get_chat_db_id(message.chat.id)
        welcome = groups_c.execute(f"SELECT welcome FROM config WHERE id = {chat_id}").fetchone()[0]
        if welcome is None:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

        await message.answer(f'üëã –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - <b>{welcome}</b>', parse_mode= "HTML")
        return await message.delete()

@dp.message_handler(commands=['setwelcome'])
async def setwelcome(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 4:
            return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 4-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')
        try:
            chat_id = get_chat_db_id(message.chat.id)
            old_welcome = groups_c.execute(f"SELECT welcome FROM config WHERE id = {chat_id}").fetchone()[0]

            new_welcome = message.get_args()
            if new_welcome is None or new_welcome == ' ' or new_welcome == '':
                return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n/setwelcome *<–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ>*", parse_mode='Markdown')

            groups_c.execute(f"UPDATE config SET welcome = ? WHERE id = {chat_id}", (new_welcome,))
            groups_db.commit()
            await message.answer(f'üòí –°—Ç–∞—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - <b>{old_welcome}</b>\nüòÉ –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - <b>{new_welcome}</b>\n\nüòá –ò–∑–º–µ–Ω–∏–ª @{message.from_user.username}', parse_mode= "HTML")
            return await message.delete()

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


@dp.message_handler(commands=['setrules'])
async def setrules(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        admin_lvl = await get_admin_lvl(message)
        if admin_lvl is False:
            return
        if admin_lvl < 5:
            return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 5-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')
        try:
            chat_id = get_chat_db_id(message.chat.id)
            old_rules = groups_c.execute(f"SELECT rules FROM config WHERE id = {chat_id}").fetchone()[0]

            new_rules = message.text.split(maxsplit=1)[1]
            if new_rules is None or new_rules == ' ' or new_rules == '':
                return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */setrules <–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞>*", parse_mode='Markdown')
                
            groups_c.execute(f"UPDATE config SET rules = ? WHERE id = {chat_id}", (new_rules,))
            groups_db.commit()
            await message.answer(f'üòí –°—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ - <b>{old_rules}</b>\nüòÉ –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ - <b>{new_rules}</b>\n\nüòá –ò–∑–º–µ–Ω–∏–ª @{message.from_user.username}', parse_mode= "HTML")
            return await message.delete()

        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")


#–ü–µ—Ä–µ–≤–æ–¥ –≤ –±–∏–Ω–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ
@dp.message_handler(commands=['binar'])
async def binar(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            number = message.get_args()
            if number is None or number == ' ' or number == '':
                return await message.reply('‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/binar (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–µ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (–ü—Ä–∏–º–µ—Ä: 654). –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–µ—Å—è—Ç–∏—á–µ–Ω–æ–µ –ø–µ—Ä–µ–¥ –¥–≤–æ–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å 0b) </b>', parse_mode= "HTML")
            
            if number.startswith('0b'):
                res = int(number, 2)
                return await message.reply(f'ü§© –ü–µ—Ä–µ–≤–æ–¥ –¥–≤–æ–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ:\n\n<b>üßê –ó–∞–ø—Ä–æ—Å (–¥–≤–æ–∏—á–Ω–æ–µ): {number}</b>\n\n<b>üìå –ü–µ—Ä–µ–≤–æ–¥ (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ): {res}</b>', parse_mode= "HTML")
            else:
                return await message.reply(f'ü§© –ü–µ—Ä–µ–≤–æ–¥ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–µ:\n\n<b>üßê –ó–∞–ø—Ä–æ—Å (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ): {number}</b>\n\n<b>üìå –ü–µ—Ä–µ–≤–æ–¥ (–¥–≤–æ–∏—á–Ω–æ–µ): {int(number):0{9 if int(number) > 0 else 10}b}</b>', parse_mode= "HTML")
        
        except ValueError:
            return await message.reply('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —á–∏—Å–µ–ª</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /binar <b>(–ß–ò–°–õ–û/–ß–ò–°–õ–û —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 0b)</b>', parse_mode= "HTML")


#–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['write'])
async def bot_write_cmd(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        say = message.get_args()
        if say is None or say == ' ' or say == '':
            return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */write <—Ç–µ–∫—Å—Ç>*', parse_mode='Markdown')            

        if len(say) <= 256:
            try:
                await message.delete()
                await message.answer(f'ü§® <i>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>:\n\n<b>{say}</b>', parse_mode= "HTML")
            except:
                await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')
                return message.delete()
        else:
            await message.reply('‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–±–æ–ª–µ–µ 256 —Å–∏–º–≤–æ–ª–æ–≤*!', parse_mode='Markdown')
            return message.delete()


#–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, GTTS
@dp.message_handler(commands=['say'])
async def bot_say_cmd(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        say = message.get_args()
        if say is None or say == ' ' or say == '':
            return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */say <—Ç–µ–∫—Å—Ç>*', parse_mode='Markdown')
    
        if len(say) <= 128:
            try: 
                var = gTTS(text = say, lang = 'ru')
                var.save(f'temp_data\\{message.from_user.id}.mp3')
                var = open(f'temp_data\\{message.from_user.id}.mp3', 'rb')
            except:
                await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')
                try:
                    return os.remove(f'temp_data\\{message.from_user.id}.mp3')
                except:
                    pass
            
            try:
                await message.answer_audio(var)
                return os.remove(f'temp_data\\{message.from_user.id}.mp3')
            except:
                pass

        else:
            return await message.reply('‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–±–æ–ª–µ–µ 128 —Å–∏–º–≤–æ–ª–æ–≤*!', parse_mode='Markdown')

@dp.message_handler(text = ['–ü—Ä–∞–≤–∏–ª–∞', '–ø—Ä–∞–≤–∏–ª–∞'])
async def every_message(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            chat_id = get_chat_db_id(message.chat.id)

            rules = groups_c.execute(f"SELECT rules FROM config WHERE id = {chat_id}").fetchone()[0]
            return await message.reply(f'<b>{rules}</b>', parse_mode= "HTML")
        except sqlite3.OperationalError:
            return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode='Markdown')


@dp.message_handler()
async def every_message(message: types.Message):
    if message.chat.type == "group" or message.chat.type == "supergroup":
        try:
            chat_id = get_chat_db_id(message.chat.id)

            groups_c.execute(f"UPDATE chat_{chat_id} SET total_exp = total_exp + {1}, tolvl_exp = tolvl_exp + {1}  WHERE id= ?", (message.from_user.id,))
            groups_db.commit()
            await asyncio.sleep(1)
            messages_check = groups_c.execute(f"SELECT tolvl_exp, need_exp FROM chat_{chat_id} WHERE id = {message.from_user.id}").fetchone()
            
            if messages_check[0] >= messages_check[1]:
                groups_c.execute(f"UPDATE chat_{chat_id} SET level = level + {1}, tolvl_exp = {0}, need_exp = need_exp + {100} WHERE id= ?", (message.from_user.id,))
                groups_db.commit()
                level_check = groups_c.execute(f"SELECT level FROM chat_{chat_id} WHERE id = {message.from_user.id}").fetchone()[0]

                return await message.reply(f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å!\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å - {level_check}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üíñ</b>', parse_mode= "HTML") 
        except:
            pass


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=print(f"{datetime.datetime.now()} | –ë–æ—Ç v. {version} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"))