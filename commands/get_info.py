from aiogram import Router, types
from aiogram.filters.command import Command, CommandObject
from aiogram.utils.markdown import hlink, hcode

from filters.chat_type import ChatTypeFilter
from database import get_member_chat_info, get_admin_lvl, get_config_data


router = Router()

# /getid
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('getid', 'gid'))
async def get_member_id(message: types.Message):
    if message.reply_to_message is None: return await message.answer('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ ID!*', parse_mode='Markdown')
    return await message.answer(f'üîç ID {hlink("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", message.reply_to_message.from_user.url)} - {hcode(message.reply_to_message.from_user.id)}', parse_mode="HTML")


# /checkvip
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command("checkvip"))
async def get_member_vip(message: types.Message, command: CommandObject):
    if message.reply_to_message is not None: user = message.reply_to_message.from_user
    elif command.args is not None:
        if command.args.isdecimal():
            user = await message.chat.get_member(int(command.args))
            user = user.user
        else: return await message.reply('‚ö†Ô∏è <b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>')
    else: user = message.from_user

    admin_lvl = await get_admin_lvl(message.chat.id, message.from_user.id)
    if admin_lvl < 1 or admin_lvl is None or admin_lvl == False: return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')

    member_info = await get_member_chat_info(message.chat.id, user.id)
    if member_info is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode="Markdown")
    
    if member_info[5]: return await message.reply(f'üòç –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hlink(member_info[3], user.url)} –∏–º–µ–µ—Ç—Å—è VIP —Å—Ç–∞—Ç—É—Å')
    else: return await message.reply(f'üòî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hlink(member_info[3], user.url)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç VIP —Å—Ç–∞—Ç—É—Å')


# /stats
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('user', 'profile', 'stats'))
async def statistic_member(message: types.Message, command: CommandObject):
    if message.reply_to_message is not None: user = message.reply_to_message.from_user
    elif command.args is not None:
        if command.args.isdecimal():
            user = await message.chat.get_member(int(command.args))
            user = user.user
        else: return await message.reply('‚ö†Ô∏è <b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>')
    else: user = message.from_user
      
    member_info = await get_member_chat_info(message.chat.id, user.id)
    if member_info is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode="Markdown")
    elif member_info == False: return await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*', parse_mode= "Markdown")
    
    return await message.reply(f'<b>{"üëë" if member_info[5] else "üë§"} –ü—Ä–æ—Ñ–∏–ª—å {hlink(member_info[3], user.url)} [{hcode(member_info[0])}]</b>\n\nüéì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ - <b>{member_info[4]}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{member_info[9]}</b>. –í—Å–µ–≥–æ - <b>{member_info[6]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{member_info[7]} EXP –∏–∑ {member_info[8]} EXP</b>', parse_mode= "HTML")


# /rank
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('rank'))
async def rank_member(message: types.Message, command: CommandObject):
    if message.reply_to_message is not None: user = message.reply_to_message.from_user
    elif command.args is not None:
        if command.args.isdecimal():
            user = await message.chat.get_member(int(command.args))
            user = user.user
        else: return await message.reply('‚ö†Ô∏è <b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>')
    else: user = message.from_user

    member_info = await get_member_chat_info(message.chat.id, user.id)
    if member_info is False: return await message.reply('‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode= "Markdown")
    if member_info is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
    return await message.reply(f'<b>–ö–∞—Ä—Ç–æ—á–∫–∞ {hlink(member_info[3], user.url)}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{member_info[9]}</b>. –í—Å–µ–≥–æ - <b>{member_info[6]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{member_info[7]} EXP –∏–∑ {member_info[8]} EXP</b>', parse_mode= "HTML")


# /welcome
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('welcome'))
async def get_chat_welcome(message: types.Message):
    admin_lvl = await get_admin_lvl(message.chat.id, message.from_user.id)
    if admin_lvl < 2 or admin_lvl == False: return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')
    
    welcome = await get_config_data(message.chat.id)
    if welcome is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
    return await message.answer(f'üëã –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n\n{hcode(welcome[1])}', parse_mode= "HTML")
