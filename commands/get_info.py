from aiogram import Router, types
from aiogram.filters.command import Command

from filters.chat_type import ChatTypeFilter
from database import get_member_chat_info, get_admin_lvl, get_config_data


router = Router()

# /getid
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('getid', 'gid'))
async def get_member_id(message: types.Message):
    if message.reply_to_message is None: return await message.answer('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ ID!*', parse_mode='Markdown')

    return await message.answer(f'üîç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} - <b>{message.reply_to_message.from_user.id}</b>', parse_mode= "HTML")


# /getnick
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command("gnick", "getnick"))
async def get_member_nick(message: types.Message):
    if message.reply_to_message is None: return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')
            
    user_data = await get_member_chat_info(message.chat.id, message.reply_to_message.from_user.id)

    if user_data == False: return await message.answer(f'üòê –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{message.reply_to_message.from_user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>!', parse_mode= "HTML")
    elif user_data is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

    return await message.answer(f'üíæ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{message.reply_to_message.from_user.username}</b> ‚Äî <b>{user_data[3]}</b>', parse_mode= "HTML")


# /checkvip
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command("checkvip"))
async def get_member_vip(message: types.Message):
    admin_lvl = await get_admin_lvl(message.chat.id, message.from_user.id)
    
    if admin_lvl is None or admin_lvl == False: return None
    if admin_lvl < 1: return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 1-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')
    if message.reply_to_message is None: return await message.reply('‚ö†Ô∏è *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!*', parse_mode='Markdown')

    is_vip = await get_member_chat_info(message.chat.id, message.reply_to_message.from_user.id)[5]
    if is_vip is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
    if is_vip == 1: return await message.answer(f'üòç –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} –∏–º–µ–µ—Ç—Å—è VIP —Å—Ç–∞—Ç—É—Å')
                
    return await message.answer(f'üòî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç VIP —Å—Ç–∞—Ç—É—Å')
    

# /welcome
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('welcome'))
async def get_chat_welcome(message: types.Message):
    admin_lvl = await get_admin_lvl(message.chat.id, message.from_user.id)
    if admin_lvl is False or admin_lvl == False: return None
    if admin_lvl < 2: return await message.reply('‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç 2-–æ–≥–æ –∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!*', parse_mode='Markdown')
    
    welcome = await get_config_data(message.chat.id)
    if welcome is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")

    return await message.answer(f'üëã –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n\n<b>{welcome[1]}</b>', parse_mode= "HTML")


# /stats
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('user', 'profile', 'stats'))
async def statistic_member(message: types.Message):
    if message.reply_to_message is None:
        check_info = await get_member_chat_info(message.chat.id, message.from_user.id)
        
        if check_info is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
        elif check_info == False: return await message.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*', parse_mode= "Markdown")
        
        vip = '–¥–∞' if check_info[5] == 1 else '–Ω–µ—Ç'
        return await message.reply(f'<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{check_info[1]} [{check_info[0]}]</b>\n\nüí¶ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <b>{check_info[3]}</b>\nüëë VIP: <b>{vip}</b>\nüéì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ - <b>{check_info[4]}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_info[9]}</b>. –í—Å–µ–≥–æ - <b>{check_info[6]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_info[7]} EXP –∏–∑ {check_info[8]} EXP</b>', parse_mode= "HTML")
      
    check_info = await get_member_chat_info(message.chat.id, message.reply_to_message.from_user.id)
    if check_info is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
    elif check_info == False: return await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*', parse_mode= "Markdown")
    
    vip = '–¥–∞' if check_info[6] == 1 else '–Ω–µ—Ç'
    return await message.reply(f'<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{check_info[1]} [{check_info[0]}]</b>\n\nüí¶ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <b>{check_info[3]}</b>\nüëë VIP: <b>{vip}</b>\nüéì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤ - <b>{check_info[4]}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_info[9]}</b>. –í—Å–µ–≥–æ - <b>{check_info[6]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_info[7]} EXP –∏–∑ {check_info[8]} EXP</b>', parse_mode= "HTML")


# /rank
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('rank'))
async def rank_member(message: types.Message):
    if message.reply_to_message is None:
        check_level = await get_member_chat_info(message.chat.id, message.from_user.id)
        if check_level is False: return await message.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start*', parse_mode= "Markdown")
        if check_level is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
        
        return await message.reply(f'<b>–ö–∞—Ä—Ç–æ—á–∫–∞ @{message.from_user.username}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_level[9]}</b>. –í—Å–µ–≥–æ - <b>{check_level[6]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_level[7]} EXP –∏–∑ {check_level[8]} EXP</b>', parse_mode= "HTML")
    
    check_level = await get_member_chat_info(message.chat.id, message.reply_to_message.from_user.id)
    if check_level is False: return await message.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start*', parse_mode= "Markdown")
    if check_level is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
    
    return await message.reply(f'<b>–ö–∞—Ä—Ç–æ—á–∫–∞ @{message.reply_to_message.from_user.username}</b>\n\nüîë –£—Ä–æ–≤–µ–Ω—å - <b>{check_level[9]}</b>. –í—Å–µ–≥–æ - <b>{check_level[6]} EXP</b>\nüéâ –î–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è - <b>{check_level[7]} EXP –∏–∑ {check_level[8]} EXP</b>', parse_mode= "HTML")