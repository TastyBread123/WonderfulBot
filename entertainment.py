from aiogram import Router, types
from aiogram.types import FSInputFile
from aiogram.filters.command import Command, CommandObject
from aiogram.utils.markdown import hcode, hlink

from gtts import gTTS
from random import randint
from os import remove

from filters.chat_type import ChatTypeFilter
from database import set_member_chat_info, get_member_chat_info


router = Router()

# /write
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('write'))
async def bot_write_cmd(message: types.Message, command: CommandObject):
    """
    –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑ –∞—Ä–≥—É–º–µ—Ç–∞ text –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞\n
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ text - 256 —Å–∏–º–≤–æ–ª–æ–≤\n
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :text - —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    """

    if command.args is None: return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */write <—Ç–µ–∫—Å—Ç>*', parse_mode='Markdown')
    if len(command.args) >= 256: return await message.reply('‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–±–æ–ª–µ–µ 256 —Å–∏–º–≤–æ–ª–æ–≤*!', parse_mode='Markdown')

    await message.delete()
    return await message.answer(f'ü§® <i>–ó–∞ –º–µ–Ω—è –Ω–∞–ø–∏—Å–∞–ª–∏</i>:\n\n<b>{command.args}</b>', parse_mode= "HTML")


# /say
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('say'))
async def bot_say_cmd(message: types.Message, command: CommandObject):
    """
    –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑ –∞—Ä–≥—É–º–µ—Ç–∞ text –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞\n
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ text - 128 —Å–∏–º–≤–æ–ª–æ–≤\n
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :text - —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    """

    if command.args is None: return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */say <—Ç–µ–∫—Å—Ç>*', parse_mode='Markdown')
    if len(command.args) >= 128: return await message.reply('‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–±–æ–ª–µ–µ 128 —Å–∏–º–≤–æ–ª–æ–≤*!', parse_mode='Markdown')
        
    try:
        voice = gTTS(text=command.args, lang='ru')
        voice.save(f'temp_data\\{message.from_user.id}.mp3')
    except:
        await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')
        try: return remove(f'temp_data\\{message.from_user.id}.mp3')
        except: pass
    
    try:
        await message.answer_audio(audio=FSInputFile(f'temp_data\\{message.from_user.id}.mp3'))
        return remove(f'temp_data\\{message.from_user.id}.mp3')
    except: return await message.reply('‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')


# /binar
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('binar'))
async def binar(message: types.Message, command: CommandObject):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ number –≤ –¥–≤–æ–∏—á–Ω–æ–µ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç\n
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :number - —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    """
    
    if command.args is None: return await message.reply('‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/binar (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–µ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (–ü—Ä–∏–º–µ—Ä: 654). –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–µ—Å—è—Ç–∏—á–µ–Ω–æ–µ –ø–µ—Ä–µ–¥ –¥–≤–æ–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å 0b) </b>', parse_mode= "HTML")
    try:
        if command.args.startswith('0b'): return await message.reply(f'ü§© –ü–µ—Ä–µ–≤–æ–¥ –¥–≤–æ–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ:\n\n<b>üßê –ó–∞–ø—Ä–æ—Å (–¥–≤–æ–∏—á–Ω–æ–µ): {command.args}</b>\n\n<b>üìå –ü–µ—Ä–µ–≤–æ–¥ (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ): {int(command.args, 2)}</b>', parse_mode= "HTML")
        else: return await message.reply(f'ü§© –ü–µ—Ä–µ–≤–æ–¥ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–µ:\n\n<b>üßê –ó–∞–ø—Ä–æ—Å (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ): {command.args}</b>\n\n<b>üìå –ü–µ—Ä–µ–≤–æ–¥ (–¥–≤–æ–∏—á–Ω–æ–µ): {int(command.args):0{9 if int(command.args) > 0 else 10}b}</b>', parse_mode= "HTML")
        
    except ValueError: return await message.reply('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —á–∏—Å–µ–ª</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /binar <b>(–ß–ò–°–õ–û/–ß–ò–°–õ–û —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 0b)</b>', parse_mode= "HTML")
    

# /chance
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('chance'))
async def chance(message: types.Message, command: CommandObject):
    """
    –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 —Å —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞\n
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :reason - –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞
    """
    
    if command.args is None or len(command.args.strip()) == 0: return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n/chance *<—Ç–µ–∫—Å—Ç>*", parse_mode='Markdown')
    member_info = await get_member_chat_info(message.chat.id, message.from_user.id)

    resul_rand = randint(0, 100)
    if resul_rand >=90: emoji='üôÄ'
    elif resul_rand >=80: emoji='üòÄ'
    elif resul_rand >=70: emoji='üòÑ'
    elif resul_rand >=60: emoji='üòÖ'
    elif resul_rand >=50: emoji='üòå'
    elif resul_rand >=40: emoji='üòí'
    elif resul_rand >=30: emoji='üòî'
    elif resul_rand >=20: emoji='üò´'
    elif resul_rand >=10: emoji='üò¢'
    elif resul_rand <=9: emoji='üò≠'

    return await message.answer(f'{emoji} {hlink(member_info[3] if member_info is not None else message.from_user.first_name, message.from_user.url)}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ  {hcode(command.args)}, —Ä–∞–≤–µ–Ω <b>{resul_rand}%</b>', parse_mode= "HTML")

# /random
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('random', 'rand'))
async def random_number(message: types.Message, command: CommandObject):
    """
    –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç x –¥–æ y\n
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :x - —á–∏—Å–ª–æ –û–¢ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥–µ—Ç —Ä–∞–Ω–¥–æ–º
    :y —á–∏—Å–ª–æ –î–û –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥–µ—Ç —Ä–∞–Ω–¥–æ–º
    """
    
    if command.args is None: return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: **/rand <–æ—Ç> <–¥–æ>**", parse_mode='Markdown')
    from_num, to_num = command.args.split(' ', maxsplit=1)

    try: resul_rand = randint(int(from_num), int(to_num))
    except ValueError: return await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –∏–ª–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */rand <–û–¢> <–î–û>*", parse_mode='Markdown')

    member_info = await get_member_chat_info(message.chat.id, message.from_user.id)
    return await message.answer(f'üé≤ {hlink(member_info[3], message.from_user.url)}, –≤–∞—à–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç <b>{from_num}</b> –¥–æ <b>{to_num}</b> ‚Äî {hcode(resul_rand)}', parse_mode= "HTML")


# /mynick
@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command('mynick'))
async def set_self_nick(message: types.Message, command: CommandObject):
    if command.args is None or len(command.args.strip()) == 0: return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */mynick <–Ω–æ–≤—ã–π –Ω–∏–∫>*!', parse_mode='Markdown')

    member_info = await get_member_chat_info(message.chat.id, message.from_user.id)
    if member_info is None: return await message.reply('‚ö†Ô∏è –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n–†–µ—à–µ–Ω–∏–µ: *–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /startbot*', parse_mode= "Markdown")
    await set_member_chat_info(message.chat.id, message.from_user.id, 'nick', command.args)
        
    return await message.answer(f'üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hlink(member_info[3], message.from_user.url)} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –Ω–∏–∫ –Ω–∞ {hcode(command.args)}', parse_mode="HTML")
