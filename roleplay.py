from aiogram import Router, types
from aiogram.utils.markdown import hlink
from aiogram.filters.command import Command, CommandObject

from filters.chat_type import ChatTypeFilter

router = Router()

@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command("sex"))
async def sex_ebaca(message: types.Message, command: CommandObject):
    if message.reply_to_message is None:
        who = command.args
        if who is None: return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */sex @username*', parse_mode='Markdown')
        return await message.answer(f'üëâüëà –ü—É–ø—Å–∏–∫ @{message.from_user.username} –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–ª —Å–µ–∫—Å-–º–∞—à–∏–Ω—É {who}')
    
    return await message.answer(f'üëâüëà –ü—É–ø—Å–∏–∫ @{message.from_user.username} –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–ª —Å–µ–∫—Å-–º–∞—à–∏–Ω—É @{message.reply_to_message.from_user.username}')


@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command("kiss"))
async def kiss(message: types.Message, command: CommandObject):
    if message.reply_to_message is None:
        who = command.args
        if who is None: return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */kiss @username*', parse_mode='Markdown')
        return await message.answer(f'üòç –ú–∞–ª—ã—à @{message.from_user.username} –ø–æ—Ü–µ–ª–æ–≤–∞–ª –∑–∞–π—á–∏–∫–∞ {who}')
            
    return await message.answer(f'üòç –ú–∞–ª—ã—à @{message.from_user.username} –ø–æ—Ü–µ–ª–æ–≤–∞–ª –∑–∞–π—á–∏–∫–∞ @{message.reply_to_message.from_user.username}')            


@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command("kill"))
async def kill(message: types.Message, command: CommandObject):
    if message.reply_to_message is None:
        who = command.args
        if who is None: return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */kill @username*', parse_mode='Markdown')
        return await message.answer(f'üî™ –ú–∞–Ω—å—è–∫ @{message.from_user.username} —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ —É–±–∏–ª –±–µ–¥–Ω—è–≥—É {who}')
            
    return await message.answer(f'üî™ –ú–∞–Ω—å—è–∫ @{message.from_user.username} —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ —É–±–∏–ª –±–µ–¥–Ω—è–≥—É @{message.reply_to_message.from_user.username}')


@router.message(ChatTypeFilter(chat_type=["group", "supergroup"]), Command("slap"))
async def slap(message: types.Message, command: CommandObject):
    if message.reply_to_message is None:
        who = command.args
        if who is None: return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: */slap @username*', parse_mode='Markdown')
        return await message.answer(f'üò§ –ë—É–ª–ª–µ—Ä @{message.from_user.username} –¥–∞–ª –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫ {who}')
            
    return await message.answer(f'üò§ –ë—É–ª–ª–µ—Ä @{message.from_user.username} –¥–∞–ª –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫ @{message.reply_to_message.from_user.username}')
